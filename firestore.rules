rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isAdmin() {
      // This is a simplified check. For production, consider custom claims.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId) || isAdmin();
    }

    match /projects/{projectId} {
      // Any authenticated user can read project metadata (get and list).
      // This is safe because sensitive data (tasks, issues) are in other collections with stricter rules.
      allow read: if request.auth != null;

      // Only the owner can create, update, or delete the project document itself.
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    match /tasks/{taskId} {
      // User can read a task if they own the project, are the client, or are directly assigned to the task.
      allow read: if request.auth.uid == resource.data.projectOwnerUid
                  || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid)
                  || request.auth.uid in resource.data.assignedToUids;

      allow create: if request.resource.data.ownerUid == request.auth.uid;
      
      // Update is allowed if you own the task OR are assigned to it.
      allow update: if request.auth.uid == resource.data.ownerUid 
                    || request.auth.uid in resource.data.assignedToUids;
                    
      // Delete is only for the task owner.
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // Rules for subcollections. These rely on denormalized data on the documents themselves.
      match /attachments/{attachmentId} {
        allow read: if get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid
                  || (get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid == request.auth.uid)
                  || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
        allow create, delete: if request.resource.data.ownerUid == request.auth.uid;
      }
      match /timeline/{eventId} {
        allow read: if get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid
                  || (get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid == request.auth.uid)
                  || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
        allow create: if request.resource.data.author.uid == request.auth.uid;
        allow update, delete: if false; // Timeline events are immutable
      }
    }

    match /issues/{issueId} {
      // User can read an issue if they own the project, are the client, or are assigned to the issue.
      allow read: if request.auth.uid == resource.data.projectOwnerUid
                  || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid)
                  || request.auth.uid in resource.data.assignedToUids;

      allow create: if request.resource.data.ownerUid == request.auth.uid;
      
      // Only the issue creator can update or delete it.
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    match /attendance/{attendanceId} {
      // User can read their own attendance, or an admin can read any.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.resource.data.userId == request.auth.uid;
      // Attendance records are immutable
      allow update, delete: if false;
    }
  }
}
