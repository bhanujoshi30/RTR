
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId) || isAdmin();
    }

    match /projects/{projectId} {
      // Allow any authenticated user to read high-level project data.
      // This is necessary for members/supervisors to be able to see projects they are a part of.
      // Security for sensitive data is handled in the tasks/issues rules.
      allow read: if request.auth != null;
      
      allow create: if request.auth != null;
      allow update: if isOwner(resource.data.ownerUid) || isAdmin();
      allow delete: if isOwner(resource.data.ownerUid);
    }

    match /tasks/{taskId} {
      // READ: A user can read a task if they are the project owner OR are assigned to the task.
      // This rule is simple enough for Firestore's query engine to validate.
      allow read: if request.auth != null && (
        resource.data.projectOwnerUid == request.auth.uid ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      // CREATE: Project owner or an admin can create any task.
      allow create: if request.auth != null && (
        request.resource.data.projectOwnerUid == request.auth.uid ||
        isAdmin()
      );

      // UPDATE: Project owner, task owner, or an assigned user can update.
      allow update: if request.auth != null && (
        isOwner(resource.data.ownerUid) ||
        resource.data.projectOwnerUid == request.auth.uid ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      // DELETE: Only the task owner can delete.
      allow delete: if isOwner(resource.data.ownerUid);

      // Subcollections are protected by the parent task's rules.
      match /timeline/{eventId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid || (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids != null && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow create: if request.auth != null;
      }

      match /attachments/{attachmentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      }
    }

    match /issues/{issueId} {
       // READ: A user can read an issue if they are the project owner OR are assigned to the issue.
      allow read: if request.auth != null && (
        resource.data.projectOwnerUid == request.auth.uid ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        isOwner(resource.data.ownerUid) ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );
      allow delete: if isOwner(resource.data.ownerUid);
    }
    
    match /attendance/{attendanceId} {
        allow read: if isAdmin();
        allow create: if request.auth != null;
    }
  }
}
