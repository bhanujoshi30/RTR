
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid, docData) {
      return docData.ownerUid != null && uid == docData.ownerUid;
    }
    
    function isProjectOwner(uid, docData) {
      return docData.projectOwnerUid != null && uid == docData.projectOwnerUid;
    }

    function isClient(uid, docData) {
      return docData.clientUid != null && uid == docData.clientUid;
    }

    function isMemberOfProject(uid, projectData) {
        return projectData.memberUids != null && uid in projectData.memberUids;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn() && 
        (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow list: if isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow create, update: if isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow delete: if isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
        request.auth.uid != userId;
    }

    // Rules for 'projects' collection
    match /projects/{projectId} {
      allow read: if isSignedIn() && (
        isOwner(request.auth.uid, resource.data) ||
        isClient(request.auth.uid, resource.data) ||
        isMemberOfProject(request.auth.uid, resource.data) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow create: if isSignedIn(); // Checked in business logic
      
      allow update: if isSignedIn() && 
        isOwner(request.auth.uid, resource.data);
      
      allow delete: if isSignedIn() && 
        isOwner(request.auth.uid, resource.data);
    }
    
    // Rules for 'tasks' subcollection
    match /tasks/{taskId} {
      allow read: if isSignedIn() && (
          isProjectOwner(request.auth.uid, resource.data) ||
          isClient(request.auth.uid, resource.data) ||
          isOwner(request.auth.uid, resource.data) ||
          (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow create: if isSignedIn() &&
        (isProjectOwner(request.auth.uid, get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      allow update: if isSignedIn() && 
        (isOwner(request.auth.uid, resource.data) || 
         (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids));
      
      allow delete: if isSignedIn() &&
        isOwner(request.auth.uid, resource.data);
        
      // Subcollections of tasks
      match /timeline/{eventId} {
        allow read: if isSignedIn() && (
          isProjectOwner(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data) ||
          isClient(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data) ||
          (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids != null && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids) ||
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow create: if isSignedIn(); // Logic handled server-side
      }
      
      match /attachments/{attachmentId} {
         allow read: if isSignedIn() && (
          isProjectOwner(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data) ||
          isClient(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data) ||
          (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids != null && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids) ||
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow create: if isSignedIn(); // Logic handled server-side
        allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      }
    }
    
    // Rules for 'issues' collection
    match /issues/{issueId} {
       allow read, write: if isSignedIn(); // Permissions checked in business logic based on task/project ownership/assignment
    }

    // Rules for 'attendance' collection
    match /attendance/{recordId} {
        allow read: if isSignedIn() && 
          (request.auth.uid == resource.data.userId || 
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }
  }
}
