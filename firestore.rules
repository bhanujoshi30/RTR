rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      // Check existence before accessing data to avoid errors on non-existent docs
      return exists(/databases/$(database)/documents/users/$(userId)) && getUserData(userId).role == role;
    }

    function isAdmin() {
      return isSignedIn() && isUserRole(request.auth.uid, 'admin');
    }

    function isProjectOwner(projectId) {
      return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin() && !isUser(userId);
    }

    // PROJECTS collection
    match /projects/{projectId} {
      // Allow read if user is authenticated. The application layer is responsible for querying
      // only the projects relevant to the user. This is a common and necessary pattern for query-based security.
      allow read: if isSignedIn();
      allow create: if isUser(request.resource.data.ownerUid);
      allow update, delete: if isProjectOwner(projectId);
    }
    
    // TASKS collection & subcollections
    match /tasks/{taskId} {
      // Allow reading if user is owner, client, or assigned.
      // This works for single GETs and also for LIST queries where the
      // query constraints (e.g., `where('assignedToUids', 'array-contains', uid)`)
      // ensure only permitted documents are returned.
      allow read: if isSignedIn() && (
        resource.data.projectOwnerUid == request.auth.uid ||
        resource.data.clientUid == request.auth.uid ||
        request.auth.uid in resource.data.assignedToUids
      );
      
      // Only the project owner can create tasks.
      allow create: if isProjectOwner(request.resource.data.projectId);

      // Only task owner can update most fields.
      // An assigned user can also update (app logic restricts which fields).
      allow update: if isUser(resource.data.ownerUid) || (request.auth.uid in resource.data.assignedToUids);
      
      allow delete: if isUser(resource.data.ownerUid);

      // Subcollections (Timeline, Attachments)
      match /{subcollection}/{docId} {
        // Inherit read permission from parent task
        allow read: if get(path(resource.parent)).data != null && (
          get(path(resource.parent)).data.projectOwnerUid == request.auth.uid ||
          get(path(resource.parent)).data.clientUid == request.auth.uid ||
          request.auth.uid in get(path(resource.parent)).data.assignedToUids
        );
        allow create: if isSignedIn();
        allow delete: if isUser(resource.data.ownerUid);
      }
    }
    
    // ISSUES collection
    match /issues/{issueId} {
      allow read: if isSignedIn() && (
        resource.data.projectOwnerUid == request.auth.uid ||
        resource.data.clientUid == request.auth.uid ||
        request.auth.uid in resource.data.assignedToUids
      );
      
      // Anyone assigned to the parent task can create an issue. App logic enforces this.
      allow create: if isSignedIn();
      
      // Issue owner or an assigned user can update.
      allow update: if isUser(resource.data.ownerUid) || (request.auth.uid in resource.data.assignedToUids);
      
      allow delete: if isUser(resource.data.ownerUid);
    }
    
    // ATTENDANCE collection
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if isUser(request.resource.data.userId);
      allow update, delete: if false; // Immutable
    }
  }
}
