rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Helper Functions
    // =================================================================
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isProjectOwner(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return projectDoc.data.ownerUid == request.auth.uid;
    }
    
    function isProjectClient(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return projectDoc.data.clientUid == request.auth.uid;
    }
    
    function isProjectMember(projectId) {
        let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
        return request.auth.uid in projectDoc.data.memberUids;
    }
    
    function isTaskOwner() {
      return resource.data.ownerUid == request.auth.uid;
    }

    function isAssignedToSubTask() {
      return request.auth.uid in resource.data.assignedToUids;
    }

    function canUpdateSubTaskFields() {
      // Check that only specific fields are being updated by an assigned member.
      let allowedKeys = ['description', 'status', 'dueDate', 'updatedAt'];
      return request.resource.data.keys().hasAll(allowedKeys) || 
             request.resource.data.keys().hasAny(allowedKeys);
    }
    
    function isStandardMainTask() {
      return resource.data.parentId == null && resource.data.taskType != 'collection';
    }

    // =================================================================
    // Collection: users
    // =================================================================
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    // =================================================================
    // Collection: projects
    // =================================================================
    match /projects/{projectId} {
      allow read: if request.auth != null && 
                     (isProjectOwner(projectId) || 
                      isProjectClient(projectId) ||
                      isProjectMember(projectId) ||
                      isAdmin());
                      
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      
      allow update: if request.auth != null && isProjectOwner(projectId);
      
      allow delete: if request.auth != null && isProjectOwner(projectId);
    }

    // =================================================================
    // Collection: tasks
    // =================================================================
    match /tasks/{taskId} {
      allow create: if request.auth.uid == request.resource.data.ownerUid && 
                       isProjectOwner(request.resource.data.projectId);
                       
      allow read: if request.auth != null && 
                     (isProjectOwner(resource.data.projectId) || 
                      isProjectClient(resource.data.projectId) || 
                      isProjectMember(resource.data.projectId) ||
                      request.auth.uid in resource.data.assignedToUids ||
                      isAdmin());
                      
      allow update: if request.auth != null && 
                       (isTaskOwner() || 
                        (isProjectOwner(resource.data.projectId) && isStandardMainTask()) ||
                        (isAssignedToSubTask() && canUpdateSubTaskFields()));

      allow delete: if request.auth != null && isTaskOwner();

      match /timeline/{eventId} {
        allow read: if request.auth != null && (isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) || isAssignedToSubTask() || isAdmin());
        allow create: if request.auth.uid == request.resource.data.author.uid;
        allow update, delete: if false; // Timeline events are immutable
      }

      match /attachments/{attachmentId} {
        allow read: if request.auth != null && (isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) || isAssignedToSubTask() || isAdmin());
        allow create: if request.auth.uid == request.resource.data.ownerUid;
        allow delete: if request.auth.uid == resource.data.ownerUid;
        allow update: if false;
      }
    }
    
    // =================================================================
    // Collection: issues
    // =================================================================
    match /issues/{issueId} {
      allow create: if request.auth.uid == request.resource.data.ownerUid;

      allow read: if request.auth != null && 
                     (isProjectOwner(resource.data.projectId) || 
                      isProjectMember(resource.data.projectId) ||
                      request.auth.uid in resource.data.assignedToUids ||
                      isAdmin());
                      
      allow update: if request.auth != null && (resource.data.ownerUid == request.auth.uid || request.auth.uid in resource.data.assignedToUids);
      
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }
    
    // =================================================================
    // Collection: attendance
    // =================================================================
    match /attendance/{attendanceId} {
        allow read: if isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update, delete: if false;
    }
  }
}
