
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // `isAuth()` can be used in any rule.
    // `getRole()` and `isAdmin()` use `get()` and are only for single-document access rules, NOT for collection queries.
    function isAuth() {
      return request.auth != null;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuth() && getRole() == 'admin';
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // Admins can manage any user. Users can manage their own document.
      allow read, write: if isAuth() && (isAdmin() || request.auth.uid == userId);
    }

    match /projects/{projectId} {
      // Any authenticated user can read project metadata. App logic filters the list shown.
      allow read: if isAuth();
      // Only authenticated users can create projects, and they must be the owner.
      allow create: if isAuth() && request.resource.data.ownerUid == request.auth.uid;
      // Only the project owner or an admin can update/delete.
      allow update, delete: if isAuth() && (isAdmin() || resource.data.ownerUid == request.auth.uid);
    }

    match /tasks/{taskId} {
      // These helpers use `resource.data` and are safe for queries.
      function isTaskOwner() { return request.auth.uid == resource.data.ownerUid; }
      function isProjectOwner() { return request.auth.uid == resource.data.projectOwnerUid; }
      function isProjectClient() { return resource.data.clientUid != null && request.auth.uid == resource.data.clientUid; }
      function isAssigned() { return request.auth.uid in resource.data.assignedToUids; }
      
      // READ: Allowed if user is admin, project owner, project client, task creator, or assigned to the task.
      // This rule is query-safe because it doesn't use `get()`.
      allow read: if isAuth() && (isAdmin() || isProjectOwner() || isProjectClient() || isTaskOwner() || isAssigned());
      
      // CREATE: User must be the owner of the project to add a task.
      allow create: if isAuth() && request.resource.data.projectOwnerUid == request.auth.uid;
      
      // UPDATE:
      // - Main Task: Can only be updated by the project owner or an admin.
      // - Sub-Task: Can be updated by project owner, admin, task owner, or an assigned user.
      allow update: if isAuth() && (
        (resource.data.parentId == null && (isProjectOwner() || isAdmin())) ||
        (resource.data.parentId != null && (isProjectOwner() || isAdmin() || isTaskOwner() || isAssigned()))
      );
      
      // DELETE: Only the task's creator (who must be the project owner).
      allow delete: if isAuth() && (isTaskOwner() || isAdmin());
    }

    match /issues/{issueId} {
        function isProjectOwner() { return request.auth.uid == resource.data.projectOwnerUid; }
        function isProjectClient() { return resource.data.clientUid != null && request.auth.uid == resource.data.clientUid; }
        function isIssueOwner() { return request.auth.uid == resource.data.ownerUid; }
        function isAssignedToIssue() { return request.auth.uid in resource.data.assignedToUids; }
        
        // This helper uses `get`, so it's only for single-document writes (create, update, delete), not reads.
        function isParentTaskParticipant(taskId) {
          let task = get(/databases/$(database)/documents/tasks/$(taskId)).data;
          return request.auth.uid == task.ownerUid || request.auth.uid in task.assignedToUids;
        }

        // READ: Query-safe rule. Allowed if admin, project owner, client, issue owner, or assigned to issue.
        allow read: if isAuth() && (isAdmin() || isProjectOwner() || isProjectClient() || isIssueOwner() || isAssignedToIssue());
        
        // CREATE: User must be involved with the parent sub-task. (Uses `get`, safe for single write).
        allow create: if isAuth() && (isAdmin() || isParentTaskParticipant(request.resource.data.taskId));

        // UPDATE/DELETE: Only the issue creator or project owner/admin.
        allow update, delete: if isAuth() && (isAdmin() || isProjectOwner() || isIssueOwner());
    }

    match /attendance/{attendanceId} {
        allow read: if isAdmin();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
    }
    
    // Generic subcollection rules
    match /{path=**}/attachments/{attachmentId} {
        allow read: if isAuth();
        allow create: if isAuth() && request.auth.uid == request.resource.data.ownerUid;
        allow delete: if isAuth() && (isAdmin() || get(resource.path).data.ownerUid == request.auth.uid);
    }
    
    match /{path=**}/timeline/{eventId} {
        allow read: if isAuth();
        allow create: if isAuth();
        allow update, delete: if false;
    }
  }
}
