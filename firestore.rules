
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own document. Admins can read/write any user document.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || request.auth.token.role == 'admin';
      allow write: if request.auth.token.role == 'admin';
    }

    // Projects can be read by their owner, client, or any assigned member.
    // They can be created/updated/deleted by the owner or an admin.
    match /projects/{projectId} {
      let isOwner = request.auth.uid == resource.data.ownerUid;
      let isAdmin = request.auth.token.role == 'admin';
      let isClient = request.auth.uid == resource.data.clientUid;
      let isMember = request.auth.uid in resource.data.memberUids;

      allow read: if isOwner || isAdmin || isClient || isMember;
      allow create, update, delete: if isOwner || isAdmin;
    }

    // Rules for tasks and their subcollections (timeline, attachments)
    match /tasks/{taskId} {
      // Define variables for the task document being accessed
      let taskData = resource.data;
      let incomingTaskData = request.resource.data;

      // Define permission conditions for the task document
      let isProjectOwner = request.auth.uid == taskData.projectOwnerUid;
      let isAdmin = request.auth.token.role == 'admin';
      let isClient = request.auth.uid == taskData.clientUid;
      let isTaskOwner = request.auth.uid == taskData.ownerUid;
      let isAssignedToSubTask = request.auth.uid in taskData.assignedToUids;
      let isMemberOfMainTask = taskData.parentId == null && request.auth.uid in taskData.memberUids;

      allow read: if isProjectOwner || isAdmin || isClient || isAssignedToSubTask || isMemberOfMainTask;
      
      // A user can only create a task if they are the authenticated user setting the ownerUid.
      allow create: if request.auth.uid == incomingTaskData.ownerUid;
      
      // Only the task owner or an admin can update or delete a task.
      allow update, delete: if isTaskOwner || isAdmin;

      // --- Nested rules for subcollections of a task ---

      // Rules for the 'timeline' subcollection
      match /timeline/{eventId} {
        // Anyone who can read the parent task can read its timeline events.
        allow read: if isProjectOwner || isAdmin || isClient || isAssignedToSubTask || isMemberOfMainTask;
        // Any authenticated user can create timeline events (the app logic ensures they have a reason).
        allow create: if request.auth.uid != null;
        // Timeline events are immutable once created.
        allow update, delete: if false;
      }

      // Rules for the 'attachments' subcollection
      match /attachments/{attachmentId} {
        // Anyone who can read the parent task can read its attachments.
        allow read: if isProjectOwner || isAdmin || isClient || isAssignedToSubTask || isMemberOfMainTask;
        // The owner of the attachment is the only one who can create or delete it.
        allow create: if request.auth.uid == request.resource.data.ownerUid;
        allow delete: if request.auth.uid == resource.data.ownerUid;
        // Attachments cannot be updated.
        allow update: if false;
      }
    }

    // Rules for the 'issues' collection
    match /issues/{issueId} {
      let isProjectOwner = request.auth.uid == resource.data.projectOwnerUid;
      let isAdmin = request.auth.token.role == 'admin';
      let isClient = request.auth.uid == resource.data.clientUid;
      let isAssignedTo = request.auth.uid in resource.data.assignedToUids;
      let isIssueOwner = request.auth.uid == resource.data.ownerUid;

      allow read: if isProjectOwner || isAdmin || isClient || isAssignedTo || isIssueOwner;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isIssueOwner || isAdmin;
    }
    
    // Rules for the 'attendance' collection
    match /attendance/{attendanceId} {
        // Only admins can read any attendance record.
        allow read: if request.auth.token.role == 'admin';
        // Any authenticated user can submit their own attendance.
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
        // Only admins can modify or delete attendance records.
        allow update, delete: if request.auth.token.role == 'admin';
    }
  }
}
