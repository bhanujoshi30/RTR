
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(uid, resource) {
      return uid == resource.data.ownerUid;
    }
    
    function isProjectOwner(uid, resource) {
      return uid == resource.data.projectOwnerUid;
    }
    
    function isClient(uid, resource) {
      return uid == resource.data.clientUid;
    }
    
    function isAdmin(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.role == 'admin';
    }
    
    function isProjectMember(uid, project) {
      return uid in (project.data.memberUids || []);
    }
    
    function isTaskMember(uid, task) {
       return uid in (task.data.memberUids || []);
    }

    match /users/{userId} {
      // Admins can read/write any user document.
      // Users can read/write their own document.
      allow read, write: if isAdmin(request.auth.uid) || request.auth.uid == userId;
    }

    match /projects/{projectId} {
      // READ: Owner, client, or a listed project member can read.
      allow read: if isOwner(request.auth.uid, resource) || 
                     isClient(request.auth.uid, resource) ||
                     isProjectMember(request.auth.uid, resource) ||
                     isAdmin(request.auth.uid);

      // CREATE: Any authenticated user can create a project. The ownerUid is set to their own UID.
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid;

      // UPDATE: Only the project owner or an admin can update project details.
      allow update: if isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid);

      // DELETE: Only the project owner or an admin can delete a project.
      allow delete: if isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid);
    }
    
    match /tasks/{taskId} {
      // READ: Can read if they are the project owner, client, assigned to the sub-task, or a member of the main task.
      allow read: if isProjectOwner(request.auth.uid, resource) ||
                     isClient(request.auth.uid, resource) ||
                     (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
                     (resource.data.memberUids != null && request.auth.uid in resource.data.memberUids) ||
                     isAdmin(request.auth.uid);
      
      // CREATE:
      // Can create if they are the project owner or an admin.
      // The ownerUid must match the person creating it.
      allow create: if request.auth != null && 
                       (request.resource.data.projectOwnerUid == request.auth.uid || isAdmin(request.auth.uid)) &&
                       request.resource.data.ownerUid == request.auth.uid;

      // UPDATE:
      // Project owner or admin can update anything.
      // An assigned user can only update status, description, and due date of a sub-task.
      allow update: if (isProjectOwner(request.auth.uid, resource) || isAdmin(request.auth.uid)) ||
                       (request.auth.uid in resource.data.assignedToUids && 
                        !('name' in request.resource.data && request.resource.data.name != resource.data.name) &&
                        !('ownerUid' in request.resource.data && request.resource.data.ownerUid != resource.data.ownerUid) &&
                        !('assignedToUids' in request.resource.data && request.resource.data.assignedToUids != resource.data.assignedToUids));

      // DELETE: Only the task owner can delete.
      allow delete: if isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid);
      
      // Allow access to subcollections
      match /{allPaths=**} {
        allow read, write;
      }
    }
    
    match /issues/{issueId} {
      // READ: Can read if they are project owner, client, or assigned to the issue.
      allow read: if isProjectOwner(request.auth.uid, resource) ||
                     isClient(request.auth.uid, resource) ||
                     (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
                     isAdmin(request.auth.uid);

      // CREATE: Must be assigned to the parent task or be the project owner/admin.
      allow create: if request.auth != null; // Simplified, relies on application logic to check parent task assignment.

      // UPDATE/DELETE: Only the issue owner or project owner/admin can update/delete.
      allow update, delete: if isOwner(request.auth.uid, resource) || 
                               isProjectOwner(request.auth.uid, resource) || 
                               isAdmin(request.auth.uid);
    }
    
    match /attendance/{attendanceId} {
      allow read: if isAdmin(request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}
