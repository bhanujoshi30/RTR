
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(docId) {
      return request.auth.uid == docId;
    }

    function requestingUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isProjectOwner(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;
    }
    
    function isProjectClient(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return projectData.clientUid != null && request.auth.uid == projectData.clientUid;
    }

    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }
    
    function isTaskOwner(taskId) {
        return request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid;
    }
    
    function isAssignedToTask(taskId) {
        return request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
    }

    // Rules
    match /users/{userId} {
      allow read, write: if isSignedIn() && requestingUserRole() == 'admin';
      allow get, update: if isOwner(userId);
    }
    
    match /projects/{projectId} {
      allow create: if isSignedIn();
      allow update, delete: if isProjectOwner(projectId) || requestingUserRole() == 'admin';
      allow get: if request.auth.uid == resource.data.ownerUid || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid) || request.auth.uid in resource.data.memberUids;
      allow list: if isSignedIn();
    }

    match /tasks/{taskId} {
      allow create: if isSignedIn();
      allow get: if isProjectOwner(resource.data.projectId) || isProjectClient(resource.data.projectId) || isProjectMember(resource.data.projectId) || isAssignedToTask(taskId);
      allow list: if isSignedIn();
      allow update, delete: if isTaskOwner(taskId) || isAssignedToTask(taskId) || isProjectOwner(resource.data.projectId) || requestingUserRole() == 'admin';
      
      match /attachments/{attachmentId} {
         allow read: if isSignedIn();
         allow create, delete: if isSignedIn() && (isTaskOwner(taskId) || isAssignedToTask(taskId));
      }
      
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
      }
    }
    
    match /issues/{issueId} {
        allow create: if isSignedIn();
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow update, delete: if isSignedIn();
    }
    
    match /attendance/{recordId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && (requestingUserRole() == 'admin' || request.auth.uid == resource.data.userId);
    }
  }
}
