
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read any user profile (for display names, etc.)
    // but can only write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Any authenticated user can read projects and their sub-collections.
    // The application's queries are responsible for filtering which projects to show.
    // Write access is restricted.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }

    match /tasks/{taskId} {
      allow read: if request.auth != null;
      allow create: if get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
      allow delete: if get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid;
    }

    match /tasks/{taskId}/{subcollection}/{docId} {
      allow read: if request.auth != null;
       allow create: if get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
      allow delete: if get(/databases/$(database)/documents/tasks/$(taskId)/attachments/$(docId)).data.ownerUid == request.auth.uid;
    }

    match /issues/{issueId} {
      allow read: if request.auth != null;
      allow create: if get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids;
      allow update: if get(/databases/$(database)/documents/issues/$(issueId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/issues/$(issueId)).data.assignedToUids;
      allow delete: if get(/databases/$(database)/documents/issues/$(issueId)).data.ownerUid == request.auth.uid || get(/databases/$(database)/documents/projects/$(get(/databases/$(database)/documents/issues/$(issueId)).data.projectId)).data.ownerUid == request.auth.uid;
    }

    match /attendance/{attendanceId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}
