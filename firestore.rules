
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(projectOwnerUid) {
      return isSignedIn() && request.auth.uid == projectOwnerUid;
    }

    function getProjectData(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data;
    }
    
    function isProjectOwner(projectId) {
      return isOwner(getProjectData(projectId).ownerUid);
    }
    
    function isProjectClient(projectId) {
      let projectData = getProjectData(projectId);
      return isSignedIn() && projectData.clientUid != null && request.auth.uid == projectData.clientUid;
    }
    
    function isProjectMember(projectId) {
        let projectData = getProjectData(projectId);
        return isSignedIn() && request.auth.uid in projectData.memberUids;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    match /projects/{projectId} {
      allow get: if isSignedIn() && (isProjectOwner(projectId) || isProjectClient(projectId) || isProjectMember(projectId) || isAdmin());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isOwner(request.resource.data.ownerUid) || isAdmin());
      allow update: if isProjectOwner(projectId) || isAdmin();
      allow delete: if isProjectOwner(projectId) || isAdmin();
    }
    
    match /tasks/{taskId} {
      function getTaskData() {
        return get(/databases/$(database)/documents/tasks/$(taskId)).data;
      }
      
      function isTaskOwner() {
        return request.auth.uid == getTaskData().ownerUid;
      }
      
      function isAssignedToTask() {
          return request.auth.uid in getTaskData().assignedToUids;
      }
      
      allow get: if isSignedIn() && (
        let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        isAdmin() || 
        isProjectOwner(taskData.projectId) || 
        isProjectClient(taskData.projectId) ||
        isProjectMember(taskData.projectId) || // <-- This is the fix for members
        request.auth.uid in taskData.assignedToUids
      );
      
      allow list: if isSignedIn();
      
      allow create: if isSignedIn() && (isProjectOwner(request.resource.data.projectId) || isAdmin());
      
      allow update: if isSignedIn() && (
        let taskData = getTaskData();
        (isTaskOwner() && isProjectOwner(taskData.projectId)) ||
        (isAssignedToTask()) ||
        isAdmin()
      );
      
      allow delete: if isSignedIn() && (isTaskOwner() || isAdmin());
      
      match /timeline/{eventId} {
        allow read, list: if isSignedIn();
        allow create: if isSignedIn(); // Logged by trusted server-side logic
      }

      match /attachments/{attachmentId} {
        allow read, list: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      }
    }
    
    match /issues/{issueId} {
        function getIssueData() {
            return get(/databases/$(database)/documents/issues/$(issueId)).data;
        }

        function isIssueOwner() {
            return request.auth.uid == getIssueData().ownerUid;
        }

        function isAssignedToIssue() {
            return request.auth.uid in getIssueData().assignedToUids;
        }
        
        allow read, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && (isIssueOwner() || isAssignedToIssue());
        allow delete: if isSignedIn() && isIssueOwner();
    }
    
    match /attendance/{attendanceId} {
      allow read, list: if isAdmin();
      allow create: if isSignedIn();
    }
  }
}
