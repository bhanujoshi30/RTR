
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserInRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isUserInRole('admin');
      allow update: if request.auth.uid == userId || isUserInRole('admin');
      allow delete: if isUserInRole('admin');
    }

    match /projects/{projectId} {
      let projectData = resource.data;
      let isOwner = request.auth.uid == projectData.ownerUid;
      let isClient = projectData.clientUid != null && request.auth.uid == projectData.clientUid;
      let isMember = projectData.memberUids != null && request.auth.uid in projectData.memberUids;
      let isAdmin = isUserInRole('admin');

      allow read: if isOwner || isClient || isMember || isAdmin;
      allow create: if request.auth.uid == request.resource.data.ownerUid || isAdmin;
      allow update: if isOwner || isAdmin;
      allow delete: if isOwner || isAdmin;
    }

    match /tasks/{taskId} {
      let taskData = resource.data;
      let isProjectOwner = request.auth.uid == taskData.projectOwnerUid;
      let isProjectClient = taskData.clientUid != null && request.auth.uid == taskData.clientUid;
      let isAssignedToTask = taskData.assignedToUids != null && request.auth.uid in taskData.assignedToUids;
      let isTaskCreator = request.auth.uid == taskData.ownerUid;
      let isAdmin = isUserInRole('admin');

      allow read: if isProjectOwner || isProjectClient || isAssignedToTask || isAdmin;
      allow create: if get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid || isAdmin;
      allow update: if isTaskCreator || isAssignedToTask || isAdmin;
      allow delete: if isTaskCreator || isAdmin;

      // Subcollections
      match /attachments/{attachmentId} {
        let parentTaskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        let isParentProjectOwner = request.auth.uid == parentTaskData.projectOwnerUid;
        let isParentProjectClient = parentTaskData.clientUid != null && request.auth.uid == parentTaskData.clientUid;
        let isAssignedToParent = parentTaskData.assignedToUids != null && request.auth.uid in parentTaskData.assignedToUids;

        allow read: if isParentProjectOwner || isParentProjectClient || isAssignedToParent || isAdmin;
        allow create, delete: if request.auth != null;
      }
      match /timeline/{eventId} {
        let parentTaskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        let isParentProjectOwner = request.auth.uid == parentTaskData.projectOwnerUid;
        let isParentProjectClient = parentTaskData.clientUid != null && request.auth.uid == parentTaskData.clientUid;
        let isAssignedToParent = parentTaskData.assignedToUids != null && request.auth.uid in parentTaskData.assignedToUids;
        
        allow read: if isParentProjectOwner || isParentProjectClient || isAssignedToParent || isAdmin;
        allow create: if request.auth.uid == request.resource.data.author.uid;
      }
    }

    match /issues/{issueId} {
      let issueData = resource.data;
      let isProjectOwner = request.auth.uid == issueData.projectOwnerUid;
      let isProjectClient = issueData.clientUid != null && request.auth.uid == issueData.clientUid;
      let isAssignedToIssue = issueData.assignedToUids != null && request.auth.uid in issueData.assignedToUids;
      let isIssueCreator = request.auth.uid == issueData.ownerUid;
      let isAdmin = isUserInRole('admin');

      allow read: if isProjectOwner || isProjectClient || isAssignedToIssue || isAdmin;
      allow create, update, delete: if isIssueCreator || isAssignedToIssue || isAdmin;
    }
    
    match /attendance/{attendanceId} {
      allow read: if isUserInRole('admin');
      allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}
