
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the requesting user has an 'admin' role in the /users collection.
      // This is a safe use of get() because it's used for role-based authorization, not filtering queries.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow a user to update their own document, or allow an admin to update any document.
      allow update: if request.auth.uid == userId || isAdmin();
      // Only admins can create or delete user documents.
      allow create, delete: if isAdmin();
    }

    match /projects/{projectId} {
      // READ: Allowed if the user is the owner, the assigned client, an admin, or is explicitly listed as a member of the project.
      allow read: if request.auth.uid == resource.data.ownerUid
                   || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid)
                   || (request.auth.uid in resource.data.memberUids)
                   || isAdmin();

      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.ownerUid || isAdmin();
    }

    match /tasks/{taskId} {
      // READ: Allowed if the user is the project owner, the client, an admin, or is assigned to the task.
      // This relies on denormalized data on the task document.
      allow read: if request.auth.uid == resource.data.projectOwnerUid
                   || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid)
                   || (request.auth.uid in resource.data.assignedToUids)
                   || isAdmin();

      // CREATE: Allowed if the user is the owner of the parent project or an admin.
      // This get() call is on a specific document path, which is acceptable for writes.
      allow create: if get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid
                    || isAdmin();

      // UPDATE: Allowed if the user is the project owner, is assigned to the task, or is an admin.
      allow update: if request.auth.uid == resource.data.projectOwnerUid
                     || (request.auth.uid in resource.data.assignedToUids)
                     || isAdmin();

      // DELETE: Allowed only if the user is the project owner or an admin.
      allow delete: if request.auth.uid == resource.data.projectOwnerUid || isAdmin();

      match /timeline/{eventId} {
        allow read, write: if request.auth != null; // Simplified for now, access is gated by parent task access in the app.
      }
      match /attachments/{attachmentId} {
        allow read, write: if request.auth != null;
        allow delete: if request.auth.uid == resource.data.ownerUid || isAdmin();
      }
    }

    match /issues/{issueId} {
      // READ: Allowed if the user is the project owner, the client, an admin, or is assigned to the issue.
      allow read: if request.auth.uid == resource.data.projectOwnerUid
                   || (resource.data.clientUid != null && request.auth.uid == resource.data.clientUid)
                   || (request.auth.uid in resource.data.assignedToUids)
                   || isAdmin();

      // CREATE: Allowed if the user is the project owner, is assigned to the parent task, or an admin.
      allow create: if get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.projectOwnerUid == request.auth.uid
                     || (request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids)
                     || isAdmin();
      
      // UPDATE: Allowed if the user is the project owner, is assigned to the issue, or an admin.
      allow update: if request.auth.uid == resource.data.projectOwnerUid
                     || (request.auth.uid in resource.data.assignedToUids)
                     || isAdmin();

      // DELETE: Allowed if the user is the project owner, created the issue, or is an admin.
      allow delete: if request.auth.uid == resource.data.projectOwnerUid
                     || request.auth.uid == resource.data.ownerUid
                     || isAdmin();
    }
    
    match /attendance/{recordId} {
        allow read: if isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}
