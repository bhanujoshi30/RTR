rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Use exists() to avoid errors on non-existent user docs (e.g. during signup).
      return isUserAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // COLLECTION RULES
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin() && !isOwner(userId);
    }

    match /projects/{projectId} {
      // Any authenticated user can read project data.
      // The application logic is responsible for querying only relevant projects.
      // This is necessary to allow list queries to succeed for all roles.
      allow read: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.ownerUid);
      allow update, delete: if isOwner(resource.data.ownerUid);
    }

    match /tasks/{taskId} {
      // Main tasks are readable by any authenticated user.
      // Sub-tasks are readable by project owner/client, assigned users, or admins.
      // This structure avoids using get() and allows list queries to succeed.
      allow read: if isUserAuthenticated() &&
                   (resource.data.parentId == null ||
                    (request.auth.uid == resource.data.projectOwnerUid ||
                     request.auth.uid == resource.data.clientUid ||
                     request.auth.uid in resource.data.assignedToUids ||
                     isAdmin()));

      // Only the project owner can create tasks. This get() on a single doc is fine for a single write op.
      allow create: if get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;

      // Task owner can update. Assigned users can also update.
      allow update: if isOwner(resource.data.ownerUid) || (request.auth.uid in resource.data.assignedToUids);

      // Only the task owner can delete.
      allow delete: if isOwner(resource.data.ownerUid);

      // Subcollection rules
      match /attachments/{attachmentId} {
        // Read permission inherits from the parent task. This get() is acceptable
        // because it's only evaluated when accessing a specific subcollection, not querying the parent.
        allow read: if isUserAuthenticated() &&
                     (get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid ||
                      request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids ||
                      isAdmin());
        // Only the user who created the attachment can write or delete it.
        allow create, delete: if request.resource.data.ownerUid == request.auth.uid || resource.data.ownerUid == request.auth.uid;
      }

      match /timeline/{timelineId} {
         // Read permission inherits from the parent task.
         allow read: if isUserAuthenticated() &&
                     (get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid ||
                      request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids ||
                      isAdmin());
        // Timeline is log-only from backend, no client writes.
        allow write: if false;
      }
    }

    match /issues/{issueId} {
      // Readable by project owner/client or assigned users.
      allow read: if isUserAuthenticated() &&
                   (request.auth.uid == resource.data.projectOwnerUid ||
                    request.auth.uid == resource.data.clientUid ||
                    request.auth.uid in resource.data.assignedToUids ||
                    isAdmin());

      // Creatable by the task owner or someone assigned to the parent task.
      allow create: if isUserAuthenticated() &&
                     (get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid == request.auth.uid ||
                      request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids);

      // Updatable by the issue owner or someone assigned to it.
      allow update: if isOwner(resource.data.ownerUid) || (request.auth.uid in resource.data.assignedToUids);

      // Deletable only by the issue owner.
      allow delete: if isOwner(resource.data.ownerUid);
    }

    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if false;
    }
  }
}
