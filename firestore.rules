
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      // Use exists() to prevent errors if the user doc hasn't been created yet.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : '';
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }

    function isProjectMember(projectId) {
      // Check if the user's UID is in the memberUids array of the project document.
      // This is a robust way to check for project membership.
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isSignedIn() && (request.auth.uid in projectData.memberUids);
    }

    // Projects Collection
    match /projects/{projectId} {
      // Allow a user to get a project if they own it, are the client, a member, or an admin.
      // This rule is now self-contained and does not cause a circular dependency.
      allow get: if isSignedIn() && (
        isUser(resource.data.ownerUid) ||
        isUser(resource.data.clientUid) ||
        (resource.data.memberUids != null && request.auth.uid in resource.data.memberUids) ||
        isAdmin()
      );
      // Allow any signed-in user to query the projects collection.
      // Security is enforced by client-side queries and the 'get' rule on each document returned.
      allow list: if isSignedIn();
      
      // Only project owners or admins can create, update, or delete projects.
      allow create, update, delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());
    }

    // Tasks Collection
    match /tasks/{taskId} {
      // Allow reading a task if the user is the owner, is assigned, is a member of the project,
      // the project client, or an admin. This rule works for both dashboard and direct links.
      allow get: if isSignedIn() && (
        isUser(resource.data.ownerUid) ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
        isProjectMember(resource.data.projectId) ||
        isUser(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientUid) ||
        isAdmin()
      );
      
      // Allow any signed-in user to query tasks. 'get' rule provides document-level security.
      allow list: if isSignedIn();
      
      // Create is handled by backend logic. Update/delete have specific permissions.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isUser(resource.data.ownerUid) || (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) || isAdmin());
      allow delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());

      // Subcollections of Tasks can be read/written by any signed-in user.
      // The logic is secured within the application's service files.
      match /attachments/{attachmentId} { allow read, write: if isSignedIn(); }
      match /timeline/{eventId} { allow read, write: if isSignedIn(); }
    }

    // Issues Collection
    match /issues/{issueId} {
      // Similar to tasks, allow reading an issue if involved in the project.
      allow get: if isSignedIn() && (
        isUser(resource.data.ownerUid) ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
        isProjectMember(resource.data.projectId) ||
        isAdmin()
      );
      allow list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    // Users Collection
    match /users/{userId} {
      // Any signed-in user can read user profiles (for names, etc.)
      allow read: if isSignedIn();
      // A user can update their own document, or an admin can update any.
      allow update: if isUser(userId) || isAdmin();
      // Only admins can create or delete user documents.
      allow create, delete: if isAdmin();
    }

    // Attendance Collection
    match /attendance/{attendanceId} {
      // A user can read their own attendance record, or an admin can read any record.
      // This rule works for both single 'get' and 'list' queries filtered by userId.
      // This is the key fix for the attendance console error.
      allow read: if isUser(resource.data.userId) || isAdmin();
      allow create: if isSignedIn();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      // A user can read and update their own notifications.
      // Creation is handled by backend functions.
      allow read, update: if isUser(resource.data.userId);
      allow create, delete: if false; // Nobody can create/delete from the client
    }
  }
}
