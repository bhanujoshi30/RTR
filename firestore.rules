rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    match /projects/{projectId} {
      allow create: if isSignedIn();
      allow list: if isSignedIn();
      allow get: if
        isSignedIn() && (
          request.auth.uid == resource.data.ownerUid ||
          request.auth.uid == resource.data.clientUid ||
          request.auth.uid in resource.data.memberUids ||
          isAdmin()
        );
      allow update, delete: if
        isSignedIn() && (
          request.auth.uid == resource.data.ownerUid ||
          isAdmin()
        );
    }
    
    match /tasks/{taskId} {
      allow create: if isSignedIn();
      allow list: if isSignedIn();
      
      function isProjectMember() {
          return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids;
      }
      
      allow get: if 
        isSignedIn() && (
          isUser(resource.data.ownerUid) || 
          (resource.data.parentId != null && request.auth.uid in resource.data.assignedToUids) ||
          isUser(resource.data.projectOwnerUid) ||
          isUser(resource.data.clientUid) ||
          isProjectMember() ||
          isAdmin()
        );

      allow update: if
        isSignedIn() && (
          isUser(resource.data.ownerUid) ||
          (resource.data.parentId != null && request.auth.uid in resource.data.assignedToUids) ||
          isAdmin()
        );
      
      allow delete: if
        isSignedIn() && (
          isUser(resource.data.ownerUid) ||
          isAdmin()
        );

      match /timeline/{eventId} {
        allow read: if
            isSignedIn() && (
                isUser(get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid) ||
                (get(/databases/$(database)/documents/tasks/$(taskId)).data.parentId != null && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids) ||
                isUser(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid) ||
                isUser(get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid) ||
                isAdmin()
            );
        allow create: if isSignedIn();
      }
      
      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (isUser(get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid) || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow delete: if isSignedIn() && isUser(resource.data.ownerUid);
      }
    }

    match /issues/{issueId} {
        allow create: if
            isSignedIn();
        allow read: if 
            isSignedIn();
        allow update: if 
            isSignedIn() && (isUser(resource.data.ownerUid) || request.auth.uid in resource.data.assignedToUids);
        allow delete: if
            isSignedIn() && isUser(resource.data.ownerUid);
    }
    
    match /attendance/{attendanceId} {
      allow create: if isSignedIn();
      
      allow get: if
          isSignedIn() && (
            isUser(resource.data.userId) ||
            isAdmin()
          );

      allow list: if
          isSignedIn() && (
            (request.query.keys().hasAny(['userId']) && request.query.userId == request.auth.uid) ||
            isAdmin()
          );
          
      allow update, delete: if isAdmin();
    }
  }
}
