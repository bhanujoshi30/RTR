rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rules for Projects collection
    match /projects/{projectId} {
      function getProjectData() {
        return resource.data;
      }
      function isOwner() {
        return isSignedIn() && request.auth.uid == getProjectData().ownerUid;
      }
      function isClient() {
        return isSignedIn() && getProjectData().clientUid != null && request.auth.uid == getProjectData().clientUid;
      }
      function isMember() {
        return isSignedIn() && request.auth.uid in getProjectData().memberUids;
      }

      allow get: if isOwner() || isClient() || isMember() || isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isOwner() || isAdmin();
    }
    
    // Rules for Tasks and their Subcollections
    match /tasks/{taskId} {
      function getTaskData() {
        return resource.data;
      }
      function isTaskOwner() {
        return isSignedIn() && request.auth.uid == getTaskData().ownerUid;
      }
      function isAssignedToTask() {
        return isSignedIn() && request.auth.uid in getTaskData().assignedToUids;
      }
      function isProjectOwnerForTask() {
        return isSignedIn() && request.auth.uid == getTaskData().projectOwnerUid;
      }
      
      allow get: if isTaskOwner() || isAssignedToTask() || isProjectOwnerForTask() || isAdmin();
      allow list: if isSignedIn();
      allow create: if isProjectOwnerForTask() || isAdmin();
      allow update: if isTaskOwner() || isAssignedToTask() || isAdmin();
      allow delete: if isTaskOwner() || isProjectOwnerForTask() || isAdmin();

      // Timeline and Attachment subcollections
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isTaskOwner() || isAssignedToTask() || isAdmin();
      }
      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isTaskOwner() || isAssignedToTask() || isAdmin();
        allow delete: if request.auth.uid == resource.data.ownerUid;
      }
    }
    
    // Rules for Issues
    match /issues/{issueId} {
       function getIssueData() {
        return resource.data;
      }
      function isIssueOwner() {
        return isSignedIn() && request.auth.uid == getIssueData().ownerUid;
      }
      function isAssignedToIssue() {
        return isSignedIn() && request.auth.uid in getIssueData().assignedToUids;
      }
       function isProjectOwnerForIssue() {
        return isSignedIn() && request.auth.uid == getIssueData().projectOwnerUid;
      }
      
      allow get: if isIssueOwner() || isAssignedToIssue() || isProjectOwnerForIssue() || isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isIssueOwner() || isAssignedToIssue() || isAdmin();
      allow delete: if isIssueOwner() || isProjectOwnerForIssue() || isAdmin();
    }
  }
}
