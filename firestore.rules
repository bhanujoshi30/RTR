rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /projects/{projectId} {
      allow read: if request.auth != null &&
                     (resource.data.ownerUid == request.auth.uid ||
                      resource.data.clientUid == request.auth.uid ||
                      (resource.data.memberUids != null && request.auth.uid in resource.data.memberUids));
      allow write: if request.auth != null && (resource.data.ownerUid == request.auth.uid || isAdmin());
    }

    match /tasks/{taskId} {
      // Task document rules
      allow read: if request.auth != null &&
                     (resource.data.projectOwnerUid == request.auth.uid ||
                      resource.data.clientUid == request.auth.uid ||
                      (resource.data.parentId == null && request.auth.uid in resource.data.memberUids) || // Main task member
                      (resource.data.parentId != null && request.auth.uid in resource.data.assignedToUids)); // Sub-task assignee

      allow create: if request.auth != null;

      allow update: if request.auth != null &&
                       (resource.data.ownerUid == request.auth.uid || isAdmin() ||
                       (resource.data.parentId != null && request.auth.uid in resource.data.assignedToUids &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'description', 'dueDate', 'updatedAt'])));

      allow delete: if request.auth != null && (resource.data.ownerUid == request.auth.uid || isAdmin());

      // --- SUBCOLLECTION RULES ---
      function canReadParentTask() {
        let parentTask = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        return parentTask.projectOwnerUid == request.auth.uid ||
               parentTask.clientUid == request.auth.uid ||
               (parentTask.parentId == null && request.auth.uid in parentTask.memberUids) ||
               (parentTask.parentId != null && request.auth.uid in parentTask.assignedToUids);
      }

      match /attachments/{attachmentId} {
        allow read: if canReadParentTask();
        allow create: if request.auth != null; // Let app logic handle permissions
        allow delete: if request.auth != null && (
                          resource.data.ownerUid == request.auth.uid ||
                          get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid ||
                          isAdmin()
                        );
      }

      match /timeline/{timelineId} {
        allow read: if canReadParentTask();
        allow create: if request.auth != null; // App logic handles this
        allow update, delete: if false; // append-only
      }
    }

    match /issues/{issueId} {
      allow read: if request.auth != null &&
                     (resource.data.projectOwnerUid == request.auth.uid ||
                      resource.data.clientUid == request.auth.uid ||
                      resource.data.ownerUid == request.auth.uid ||
                      (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids));

      allow write: if request.auth != null &&
                      (resource.data.ownerUid == request.auth.uid ||
                       (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids));
    }

    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }
  }
}
