
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    match /projects/{projectId} {
      // Any authenticated user can read a project's high-level details.
      // This is safe because sensitive info (tasks/issues) is in other collections.
      allow read: if request.auth != null;
      
      // Only the project owner or an admin can create, update, or delete it.
      allow create: if request.auth.uid == request.resource.data.ownerUid || isAdmin();
      allow update, delete: if request.auth.uid == resource.data.ownerUid || isAdmin();
    }

    match /tasks/{taskId} {
      // A user can read a task if:
      // 1. They own the project the task belongs to.
      // 2. They are the client for the project.
      // 3. They are assigned to the task (for sub-tasks).
      // 4. They are a member of the task (for main tasks, through a sub-task assignment).
      allow read: if request.auth.uid == resource.data.projectOwnerUid 
                   || request.auth.uid == resource.data.clientUid
                   || request.auth.uid in resource.data.memberUids 
                   || request.auth.uid in resource.data.assignedToUids;

      // The project owner or an admin can create tasks.
      allow create: if request.auth.uid == request.resource.data.projectOwnerUid || isAdmin();
      
      // The task owner or an assigned user can update it.
      allow update: if request.auth.uid == resource.data.ownerUid || request.auth.uid in resource.data.assignedToUids;

      // Only the task owner can delete it.
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // Rules for subcollections of tasks
      match /timeline/{eventId} {
        let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        let canReadTask = request.auth.uid == taskData.projectOwnerUid || request.auth.uid in taskData.memberUids || request.auth.uid in taskData.assignedToUids;
        let canUpdateTask = request.auth.uid == taskData.ownerUid || request.auth.uid in taskData.assignedToUids;
        
        allow read: if canReadTask;
        allow create: if canUpdateTask;
      }

      match /attachments/{attachmentId} {
        let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
        let canReadTask = request.auth.uid == taskData.projectOwnerUid || request.auth.uid in taskData.memberUids || request.auth.uid in taskData.assignedToUids;

        allow read: if canReadTask;
        allow create, delete: if request.auth.uid == request.resource.data.ownerUid;
      }
    }

    match /issues/{issueId} {
      // A user can read an issue if:
      // 1. They own the project the issue belongs to.
      // 2. They are the client for the project.
      // 3. They are assigned to the issue.
      allow read: if request.auth.uid == resource.data.projectOwnerUid
                   || request.auth.uid == resource.data.clientUid
                   || request.auth.uid in resource.data.assignedToUids;

      // A user can create an issue if they own the project or are assigned to the parent task.
      allow create: if request.auth.uid == request.resource.data.projectOwnerUid 
                     || request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids;

      // Only the issue owner can update or delete it.
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    match /attendance/{attendanceId} {
      // A user can create their own attendance record.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Only an admin can read attendance records.
      allow read: if isAdmin();
    }
  }
}
