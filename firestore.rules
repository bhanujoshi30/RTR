
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // USER documents
    // Only admins can manage the users collection, but users can read their own document.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isUserRole('admin');
      allow list, write, delete: if isUserRole('admin');
    }

    // PROJECT documents
    // Only the project owner can manage their project.
    match /projects/{projectId} {
      allow read: if resource.data.ownerUid == request.auth.uid; // Simple read access for owner
      allow list: if request.auth.uid == request.query.ownerUid; // Allow listing only for the owner making the query
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if resource.data.ownerUid == request.auth.uid;
    }

    // TASK documents
    match /tasks/{taskId} {
      // WARNING: This rule is temporarily permissive for debugging and unblocking.
      // It allows any authenticated user to read task data.
      // This should be tightened in a production environment.
      allow read: if request.auth != null;

      allow create: if request.auth != null &&
        // The person creating the task must be the owner of the project
        get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;

      allow update: if request.auth != null && (
        // The person updating must be the owner of the task
        resource.data.ownerUid == request.auth.uid ||
        // Or an assigned user can update their own sub-task (but not main tasks)
        (resource.data.parentId != null && resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid; // Only owner can delete
      
      match /attachments/{attachmentId} {
      	allow read: if request.auth != null; // Any authenticated user can read attachments if they have access to the task
        allow create: if request.auth != null; // Rules on who can create are in the service layer
        allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      }
    }

    // ISSUE documents
    match /issues/{issueId} {
       // WARNING: This rule is temporarily permissive for debugging and unblocking.
       // It allows any authenticated user to read issue data.
       // This should be tightened in a production environment.
       allow read: if request.auth != null;
      
      allow create: if request.auth != null && (
        // Person creating must own the project. We check assignment in service layer.
        get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid
      );

      allow update: if request.auth != null && (
      	resource.data.ownerUid == request.auth.uid ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );
      
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }
  }
}
