
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---- Helper Functions ----
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserRole(role) {
      // This function can only be used for single document requests, not list queries.
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isUserAuthenticated() && userDoc.data.role == role;
    }

    // ---- Collection Rules ----

    match /users/{userId} {
      // Admins can manage users. Authenticated users can read user data (for names, etc.).
      allow read: if isUserAuthenticated();
      allow write: if isUserRole('admin');
    }

    match /projects/{projectId} {
      // Any authenticated user can read project documents.
      // The app's logic is responsible for querying only relevant projects for a given user.
      allow read: if isUserAuthenticated();
      
      // Only non-client/member roles can create projects.
      allow create: if isUserAuthenticated() && !isUserRole('supervisor') && !isUserRole('member') && !isUserRole('client');
      
      // Only the project owner can update or delete it.
      allow update, delete: if isUserAuthenticated() && resource.data.ownerUid == request.auth.uid;
    }

    match /tasks/{taskId} {
      // A task can be read if the user is the project owner, the assigned client, OR is assigned to the task.
      // This structure is safe for queries on 'assignedToUids' or queries constrained by 'projectOwnerUid'.
      allow read: if isUserAuthenticated() && (
        resource.data.projectOwnerUid == request.auth.uid ||
        (resource.data.clientUid != null && resource.data.clientUid == request.auth.uid) ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      // Only the project owner can create tasks.
      allow create: if isUserAuthenticated() && get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;
      
      // The task owner can update anything. An assigned user can only update sub-tasks they are on.
      allow update: if isUserAuthenticated() && (
        resource.data.ownerUid == request.auth.uid ||
        (resource.data.parentId != null && resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );
      
      // Only the task owner can delete it.
      allow delete: if isUserAuthenticated() && resource.data.ownerUid == request.auth.uid;

      // Subcollections are readable if the parent task is readable.
      match /attachments/{attachmentId} {
        allow read: if isUserAuthenticated();
        allow create, delete: if request.auth.uid == request.resource.data.ownerUid;
      }
      match /timeline/{eventId} {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
      }
    }

    match /issues/{issueId} {
      // An issue can be read if the user is the project owner, client, OR is assigned to the issue.
      allow read: if isUserAuthenticated() && (
        resource.data.projectOwnerUid == request.auth.uid ||
        (resource.data.clientUid != null && resource.data.clientUid == request.auth.uid) ||
        (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids)
      );

      // Any authenticated user involved in the task can create an issue. Service logic provides finer control.
      allow create: if isUserAuthenticated();
      
      // Only the issue owner can update or delete it.
      allow update, delete: if isUserAuthenticated() && resource.data.ownerUid == request.auth.uid;
    }

    match /attendance/{attendanceId} {
      // Admins can read all attendance records.
      allow read: if isUserRole('admin');
      
      // Users can only create their own attendance record.
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
  }
}
