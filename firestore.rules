rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    //         HELPER FUNCTIONS
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(role) {
      if (!isSignedIn()) { return false; }
      let userData = getUserData(request.auth.uid);
      return userData != null && userData.role == role;
    }

    function isAdmin() {
      return isUserRole('admin');
    }
    
    function isOwner(doc) {
      return isSignedIn() && request.auth.uid == doc.data.ownerUid;
    }

    function isProjectOwner(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isSignedIn() && projectData != null && request.auth.uid == projectData.ownerUid;
    }

    function isClient(doc) {
      return isSignedIn() && doc.data.clientUid != null && request.auth.uid == doc.data.clientUid;
    }
    
    function isAssigned(doc) {
      // Check if assignedToUids exists and is a list before checking for membership
      return isSignedIn() && doc.data.keys().hasAny(['assignedToUids']) && doc.data.assignedToUids is list && request.auth.uid in doc.data.assignedToUids;
    }

    // =================================
    //         COLLECTION RULES
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create: if isAdmin(); // Only admins can create user documents
      allow delete: if isAdmin();
      // Admins can update anything. Users can update their own doc but cannot change their role.
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == userId && request.resource.data.role == resource.data.role);
    }

    match /projects/{projectId} {
      // Any authenticated user can read basic project data.
      // The service layer is responsible for filtering which projects a user can see/access.
      // Rules on subcollections (tasks, issues) provide granular security.
      allow read: if isSignedIn();
      // Only the project owner or an admin can modify the project document.
      allow write: if isAdmin() || isOwner(resource);
    }
    
    match /tasks/{taskId} {
      allow read: if isAdmin() || isProjectOwner(resource.data.projectId) || isOwner(resource) || isAssigned(resource) || isClient(resource);
      allow create: if isAdmin() || isProjectOwner(request.resource.data.projectId);
      // Admin/Owner can update anything. Assigned user can update specific fields.
      allow update: if isAdmin() || isOwner(resource) || (
          isAssigned(resource) && 
          request.resource.data.keys().hasOnly(['status', 'description', 'dueDate', 'updatedAt'])
      );
      allow delete: if isAdmin() || isOwner(resource);

      match /attachments/{attachmentId} {
        function parentTask() {
            return get(/databases/$(database)/documents/tasks/$(taskId));
        }
        allow read: if isAdmin() || isProjectOwner(parentTask().data.projectId) || isOwner(parentTask()) || isAssigned(parentTask()) || isClient(parentTask());
        allow create: if isOwner(parentTask()) || isAssigned(parentTask());
        allow delete: if isAdmin() || isOwner(resource);
      }

      match /timeline/{eventId} {
        function parentTask() {
            return get(/databases/$(database)/documents/tasks/$(taskId));
        }
        allow read: if isAdmin() || isProjectOwner(parentTask().data.projectId) || isOwner(parentTask()) || isAssigned(parentTask()) || isClient(parentTask());
        allow write: if false; // Only backend can write
      }
    }

    match /issues/{issueId} {
      allow read: if isAdmin() || isProjectOwner(resource.data.projectId) || isOwner(resource) || isAssigned(resource) || isClient(resource);
      // Creator must be owner of parent task or assigned to it.
      allow create: if isSignedIn() && (
                      isOwner(get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId))) || 
                      isAssigned(get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)))
                    );
      allow update, delete: if isAdmin() || isOwner(resource);
    }
    
    match /attendance/{attendanceId} {
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
  }
}
