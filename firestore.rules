
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function requestingUserRole() {
      return getUserData(request.auth.uid).role;
    }

    function isAdmin() {
      return isSignedIn() && requestingUserRole() == 'admin';
    }

    // --- Resource-specific data access functions ---
    function getProjectData(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data;
    }
    
    function getTaskData(taskId) {
        return get(/databases/$(database)/documents/tasks/$(taskId)).data;
    }
    
    function getIssueData(issueId) {
        return get(/databases/$(database)/documents/issues/$(issueId)).data;
    }

    // --- Role and ownership check functions ---
    function isProjectOwner(projectId) {
      return isSignedIn() && request.auth.uid == getProjectData(projectId).ownerUid;
    }

    function isProjectClient(projectId) {
        return isSignedIn() && request.auth.uid == getProjectData(projectId).clientUid;
    }

    function isTaskOwner(taskId) {
        return isSignedIn() && request.auth.uid == getTaskData(taskId).ownerUid;
    }
    
    function isAssignedToTask(taskId) {
        return isSignedIn() && request.auth.uid in getTaskData(taskId).assignedToUids;
    }
    
    function isAssignedToIssue(issueId) {
        return isSignedIn() && request.auth.uid in getIssueData(issueId).assignedToUids;
    }


    // --- Rules Start Here ---

    // USERS: Controls who can read/write user profile documents
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      
      // Admins can create any user doc. A user can create their own doc only if it doesn't exist.
      allow create: if isAdmin() || (isUser(userId) && !exists(/databases/$(database)/documents/users/$(userId)));
      
      // Admins can update any user. A user can update their own doc, but cannot change their role.
      allow update: if isAdmin() || (isUser(userId) && request.resource.data.role == resource.data.role);

      // Admins can delete any user doc except their own.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // PROJECTS: Controls access to top-level project documents
    match /projects/{projectId} {
      // Owners, clients, and admins can read.
      allow read: if isProjectOwner(projectId) || isProjectClient(projectId) || isAdmin();
      
      // Any authenticated user who is not a client can create a project, and they must set themselves as owner.
      allow create: if isSignedIn() && requestingUserRole() != 'client' && isUser(request.resource.data.ownerUid);
      
      // Only the project owner or an admin can update or delete it.
      allow update, delete: if isProjectOwner(projectId) || isAdmin();
    }
    
    // TASKS and their subcollections (timeline, attachments)
    match /tasks/{taskId} {
      // Allow read if you own the project, are the client, own the task, are assigned to the task, or are an admin.
      allow read: if isProjectOwner(resource.data.projectId) || isProjectClient(resource.data.projectId) || isTaskOwner(taskId) || isAssignedToTask(taskId) || isAdmin();
      
      // Creating a main task (parentId is null) requires being the project owner.
      // Creating a sub-task requires being the main task owner.
      allow create: if (request.resource.data.parentId == null && isProjectOwner(request.resource.data.projectId)) ||
                       (request.resource.data.parentId != null && isTaskOwner(request.resource.data.parentId));

      // To update a task, you must be the task owner or assigned to it or be the project owner
      allow update: if isTaskOwner(taskId) || isAssignedToTask(taskId) || isProjectOwner(resource.data.projectId);

      // To delete, you must be the task owner or the project owner.
      allow delete: if isTaskOwner(taskId) || isProjectOwner(resource.data.projectId);

      // TIMELINE subcollection
      match /timeline/{eventId} {
        allow read, create: if isTaskOwner(taskId) || isAssignedToTask(taskId);
      }

      // ATTACHMENTS subcollection
      match /attachments/{attachmentId} {
        allow read: if isTaskOwner(taskId) || isAssignedToTask(taskId) || isProjectOwner(getTaskData(taskId).projectId) || isProjectClient(getTaskData(taskId).projectId) || isAdmin();
        allow create: if isTaskOwner(taskId) || isAssignedToTask(taskId);
        allow delete: if isUser(resource.data.ownerUid); // Only the person who uploaded it can delete.
      }
    }
    
    // ISSUES
    match /issues/{issueId} {
        function getParentTaskData() {
          return getTaskData(resource.data.taskId);
        }
        
        // Allow read/update if you are involved with the issue, the parent task, or the parent project.
        allow read, create, update: if isAssignedToIssue(issueId) || isTaskOwner(getParentTaskData().id) || isAssignedToTask(getParentTaskData().id) || isProjectOwner(getParentTaskData().projectId) || isAdmin();

        // Only the issue creator can delete it.
        allow delete: if isUser(resource.data.ownerUid);
    }

    // ATTENDANCE
    match /attendance/{attendanceId} {
      allow create: if isUser(request.resource.data.userId); // User can create their own attendance record.
      allow read: if isAdmin(); // Only admins can read all attendance records.
    }
  }
}
