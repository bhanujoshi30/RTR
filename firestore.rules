rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(docId, collectionName) {
      return request.auth.uid == get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.ownerUid;
    }

    function isProjectOwner(projectId) {
      return isOwner(projectId, 'projects');
    }

    function isAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'admin';
    }
    
    function isClient(projectId, userId) {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.clientUid == userId;
    }

    function isAssignedToTask(taskId, userId) {
      let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
      // The 'in' operator checks for presence in an array field for 'get' requests.
      return userId in taskData.assignedToUids;
    }

    // Rules for projects
    match /projects/{projectId} {
      // Any authenticated user can read a project's details.
      // The queries in the app ensure users only see projects they are supposed to.
      allow read: if isUserAuthenticated();
      
      // Only authenticated users can create projects, and they must be the owner.
      allow create: if isUserAuthenticated() && request.resource.data.ownerUid == request.auth.uid;
      
      // Only the project owner can update or delete it.
      allow update: if isUserAuthenticated() && isProjectOwner(projectId);
      allow delete: if isUserAuthenticated() && isProjectOwner(projectId);
    }
    
    // Rules for tasks and their subcollections
    match /tasks/{taskId} {
      // Read main tasks is open, sub-tasks are restricted.
      allow read: if isUserAuthenticated() && 
                     (
                       // Anyone can read a main task document. Visibility is controlled by client-side queries.
                       resource.data.parentId == null ||
                       // For sub-tasks, you must be the project owner, client, or assigned to it.
                       isProjectOwner(resource.data.projectId) ||
                       isClient(resource.data.projectId, request.auth.uid) ||
                       (request.auth.uid in resource.data.assignedToUids)
                     );
                      
      allow create: if isUserAuthenticated() && isProjectOwner(request.resource.data.projectId);
      
      // Update is allowed by owner or assigned user (client-side logic validates fields).
      allow update: if isUserAuthenticated() && 
                       (
                         isOwner(taskId, 'tasks') ||
                         isAssignedToTask(taskId, request.auth.uid)
                       );

      allow delete: if isUserAuthenticated() && isOwner(taskId, 'tasks');

      match /{subcollection}/{docId} {
        allow read, write: if isUserAuthenticated();
      }
    }
    
    // Rules for issues
    match /issues/{issueId} {
      allow read, write: if isUserAuthenticated();
    }

    // Rules for users
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      // Only admin can create, update, or delete user roles/docs.
      allow create, update, delete: if isAdmin();
    }

    // Rules for attendance
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}