
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions are removed as they were causing issues with list queries.
    // Logic is now handled directly in the rules below.

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || request.auth.token.role == 'admin';
    }

    match /projects/{projectId} {
      // Allow any authenticated user to read the list of projects or a single project.
      // This is safe because sensitive data is in subcollections or other collections.
      // The app logic determines which projects to show.
      // Write access remains restricted to the owner.
      allow read: if request.auth != null;
      allow write: if request.auth.uid == resource.data.ownerUid;

      // Note: There are no subcollections on projects that need rules.
    }

    match /tasks/{taskId} {
      // Allow read if the user is the project owner OR the assigned client OR is in the assignedToUids list.
      allow read: if request.auth.uid == resource.data.projectOwnerUid 
                  || request.auth.uid == resource.data.clientUid
                  || request.auth.uid in resource.data.assignedToUids;

      // Allow create for any authenticated user. Validation happens in application logic.
      allow create: if request.auth != null;

      // Allow update/delete only by the project owner or the task owner.
      allow update, delete: if request.auth.uid == resource.data.projectOwnerUid || request.auth.uid == resource.data.ownerUid;

      // Secure subcollections
      match /attachments/{attachmentId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid
                    || request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid
                    || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
        allow create, delete: if request.auth.uid == request.resource.data.ownerUid;
      }
      
      match /timeline/{eventId} {
          allow read: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid 
                      || request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid
                      || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
          allow create: if request.auth != null; // Logged by the system/user action
          allow delete: if false; // Timeline is immutable
      }
    }

    match /issues/{issueId} {
       // Allow read if the user is the project owner OR the assigned client OR is in the assignedToUids list.
      allow read: if request.auth.uid == resource.data.projectOwnerUid 
                  || request.auth.uid == resource.data.clientUid
                  || request.auth.uid in resource.data.assignedToUids;
      
      // Allow create for any authenticated user. Validation happens in application logic.
      allow create: if request.auth != null;

      // Allow update/delete only by the project owner or the issue owner.
      allow update, delete: if request.auth.uid == resource.data.projectOwnerUid || request.auth.uid == resource.data.ownerUid;
    }
    
    match /attendance/{attendanceId} {
        allow read: if request.auth.token.role == 'admin';
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update, delete: if false;
    }
  }
}
