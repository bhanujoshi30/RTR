rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }

    function isAssignedToTask(taskId) {
        return request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /projects/{projectId} {
      allow get, list: if request.auth != null;
      
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.ownerUid || isAdmin();
    }

    match /tasks/{taskId} {
      allow read: if resource.data.projectOwnerUid == request.auth.uid 
                  || request.auth.uid in resource.data.assignedToUids
                  || resource.data.ownerUid == request.auth.uid
                  || resource.data.clientUid == request.auth.uid
                  || isAdmin();

      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();
      
      allow update: if resource.data.ownerUid == request.auth.uid 
                    || request.auth.uid in resource.data.assignedToUids 
                    || resource.data.projectOwnerUid == request.auth.uid
                    || isAdmin();
      
      allow delete: if resource.data.ownerUid == request.auth.uid 
                    || resource.data.projectOwnerUid == request.auth.uid
                    || isAdmin();
    }

    match /tasks/{taskId}/{subcollection}/{documentId} {
       allow read, write: if get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid == request.auth.uid 
                          || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids
                          || isAdmin();
    }

    match /issues/{issueId} {
      allow read: if resource.data.projectOwnerUid == request.auth.uid 
                  || request.auth.uid in resource.data.assignedToUids
                  || resource.data.ownerUid == request.auth.uid
                  || resource.data.clientUid == request.auth.uid
                  || isAdmin();
      
      allow create: if isAssignedToTask(request.resource.data.taskId) 
                    || isProjectOwner(request.resource.data.projectId)
                    || isAdmin();
      
      allow update: if resource.data.ownerUid == request.auth.uid 
                    || request.auth.uid in resource.data.assignedToUids 
                    || resource.data.projectOwnerUid == request.auth.uid
                    || isAdmin();
      
      allow delete: if resource.data.ownerUid == request.auth.uid 
                    || resource.data.projectOwnerUid == request.auth.uid
                    || isAdmin();
    }

    match /attendance/{attendanceId} {
        allow create: if request.auth.uid == request.resource.data.userId;
        allow read: if isAdmin() || request.auth.uid == resource.data.userId;
    }
  }
}
