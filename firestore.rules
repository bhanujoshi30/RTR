
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for role on the user's own document
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isProjectOwner(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;
    }
    
    function isProjectClient(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.clientUid;
    }

    function isProjectMember(projectId) {
        return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    function isAssignedTo(assignedUids) {
        return request.auth.uid in assignedUids;
    }
    
    // USERS collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isAdmin();
      // Admins cannot delete their own user document via this rule
      allow update, delete: if isAdmin() && request.auth.uid != userId;
    }
    
    // PROJECTS collection
    match /projects/{projectId} {
      allow read: if isOwner(resource.data.ownerUid) || 
                     (resource.data.clientUid != null && isOwner(resource.data.clientUid)) ||
                     (resource.data.memberUids != null && request.auth.uid in resource.data.memberUids) ||
                     isAdmin();
                     
      allow list: if isSignedIn(); 

      allow create: if isOwner(request.resource.data.ownerUid);
      allow update: if isOwner(resource.data.ownerUid) || isAdmin();
      allow delete: if isOwner(resource.data.ownerUid) || isAdmin();
    }
    
    // TASKS collection
    match /tasks/{taskId} {
      allow get: if isAdmin() ||
                    isProjectOwner(resource.data.projectId) ||
                    (resource.data.clientUid != null && isOwner(resource.data.clientUid)) ||
                    isOwner(resource.data.ownerUid) || 
                    (resource.data.assignedToUids != null && isAssignedTo(resource.data.assignedToUids)) ||
                    (resource.data.parentId == null && isProjectMember(resource.data.projectId));
                    
      allow list: if isSignedIn();
      
      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();
      
      allow update: if isOwner(resource.data.ownerUid) || 
                       (resource.data.parentId != null && isAssignedTo(resource.data.assignedToUids)) || 
                       isAdmin();
      
      allow delete: if isOwner(resource.data.ownerUid) || isAdmin();
      
      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isOwner(request.resource.data.ownerUid) || 
                         isAssignedTo(get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow delete: if isOwner(resource.data.ownerUid);
      }
      
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
      }
    }
    
    // ISSUES collection
    match /issues/{issueId} {
      allow read: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update: if isOwner(request.resource.data.ownerUid) || 
                               isAssignedTo(request.resource.data.assignedToUids);
      allow delete: if isOwner(resource.data.ownerUid);
    }
    
    // ATTENDANCE collection
    match /attendance/{attendanceId} {
        allow read: if isAdmin();
        allow list: if isAdmin();
        allow create: if isOwner(request.resource.data.userId);
    }
  }
}
