
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(uid, ownerUid) {
      return uid == ownerUid;
    }

    function isClient(uid, clientUid) {
        return uid == clientUid;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user profiles
    match /users/{userId} {
      // Admins can manage all user documents. Users can read their own.
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      // Admins can create/update user docs. Users can update their own language preference.
      allow write: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && request.auth.uid == userId && onlyUpdatingFields(['preferredLanguage', 'updatedAt']);
    }

    // Helper for user profile updates
    function onlyUpdatingFields(allowedFields) {
      return request.resource.data.keys().hasAll(allowedFields) && request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // Rules for projects
    match /projects/{projectId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid;
      allow read: if isSignedIn() && (
                    isOwner(request.auth.uid, resource.data.ownerUid) ||
                    isClient(request.auth.uid, resource.data.clientUid) ||
                    (request.auth.uid in resource.data.memberUids) ||
                    isAdmin()
                  );
      // Owner or admin can update project details
      allow update: if isSignedIn() && (isOwner(request.auth.uid, resource.data.ownerUid) || isAdmin());
      // Only owner can delete
      allow delete: if isSignedIn() && isOwner(request.auth.uid, resource.data.ownerUid);
    }

    // Rules for tasks
    match /tasks/{taskId} {
      // Anyone who is authenticated can create a task. Further checks are in backend logic.
      allow create: if isSignedIn();

      // Read is allowed if user is project owner, assigned to task, or an admin.
      allow read: if isSignedIn() && (
                      isOwner(request.auth.uid, get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerUid) ||
                      request.auth.uid in resource.data.assignedToUids ||
                      isAdmin()
                    );

      // Update is allowed for project owner or assigned user.
      allow update: if isSignedIn() && (
                      isOwner(request.auth.uid, get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid) ||
                      request.auth.uid in resource.data.assignedToUids ||
                      isAdmin()
                    );

      // Delete is allowed for project owner only.
      allow delete: if isSignedIn() &&
                      isOwner(request.auth.uid, get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerUid);

      // Allow timeline subcollection access
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
      // Allow attachments subcollection access
      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        // Only owner of attachment can delete
        allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
        allow update: if false;
      }
    }
    
    // Rules for issues
    match /issues/{issueId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSignedIn() && (
                      isOwner(request.auth.uid, get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerUid) ||
                      isAdmin()
                    );
    }
    
    // Rules for attendance
    match /attendance/{attendanceId} {
        // Users can create their own attendance records
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        
        // Admins can read any attendance record. Users can read their own.
        allow read: if isSignedIn() && (isAdmin() || resource.data.userId == request.auth.uid);
        
        // No one can update or delete attendance records through the client.
        allow update, delete: if false;
    }
  }
}
