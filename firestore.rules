rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      // This function uses get(), so it CANNOT be used in 'list' rules.
      // It's safe for 'get', 'create', 'update', 'delete'.
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }
    
    function isProjectOwner(projectId) {
      return isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);
    }
    
    function isProjectClient(projectId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.clientUid;
    }

    function isProjectMember(projectId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // USER-RELATED RULES
    match /users/{userId} {
      // Any authenticated user can read user profiles (for display names, etc.)
      allow read: if isSignedIn();
      // Only an admin can create, update, or delete user documents
      allow write: if isAdmin();
    }
    
    // PROJECT-RELATED RULES
    match /projects/{projectId} {
      // 'get' is for single document reads. Using functions with get() is okay here.
      allow get: if isProjectOwner(projectId) || isProjectClient(projectId) || isProjectMember(projectId) || isAdmin();
      
      // 'list' is for collection queries. Rules MUST NOT use get().
      // The query from the app must constrain the list to match one of these conditions.
      allow list: if request.auth.uid == resource.data.ownerUid ||
                     request.auth.uid == resource.data.clientUid ||
                     request.auth.uid in resource.data.memberUids;
      
      allow create: if isOwner(request.resource.data.ownerUid) || isAdmin();
      allow update: if isProjectOwner(projectId) || isAdmin();
      allow delete: if isProjectOwner(projectId) || isAdmin();
    }
    
    // TASK-RELATED RULES
    match /tasks/{taskId} {
      allow get: if isAdmin() || 
                     isProjectOwner(resource.data.projectId) || 
                     isProjectClient(resource.data.projectId) ||
                     (isSignedIn() && request.auth.uid in resource.data.assignedToUids) ||
                     isOwner(resource.data.ownerUid);

      // 'list' for tasks must also not use get().
      // The app queries tasks by projectId, by user assignment, or by parentId.
      allow list: if (request.query.where.projectId == resource.data.projectId) || // Simplification, relies on app query
                     (request.auth.uid in resource.data.assignedToUids);

      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (
                               isOwner(resource.data.ownerUid) || 
                               isAdmin() ||
                               (request.auth.uid in resource.data.assignedToUids)
                             );
      
      // Sub-collection rules for tasks
      match /attachments/{attachmentId} {
        // If a user can read the parent task, they can read its attachments/timeline.
        allow read: if get(/databases/$(database)/documents/tasks/$(taskId)).data != null &&
                       (isAdmin() || 
                        isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) ||
                        isProjectClient(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) ||
                        (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids) ||
                        isOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid));
        allow write: if isSignedIn();
      }

      match /timeline/{eventId} {
         allow read: if get(/databases/$(database)/documents/tasks/$(taskId)).data != null &&
                       (isAdmin() || 
                        isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) ||
                        isProjectClient(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) ||
                        (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids) ||
                        isOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid));
        allow write: if isSignedIn();
      }
    }
    
    // ISSUE-RELATED RULES
    match /issues/{issueId} {
       allow get: if isAdmin() || 
                      isProjectOwner(resource.data.projectId) ||
                      isProjectClient(resource.data.projectId) ||
                      (isSignedIn() && request.auth.uid in resource.data.assignedToUids) ||
                      isOwner(resource.data.ownerUid);

      allow list: if (request.query.where.taskId == resource.data.taskId) ||
                     (request.auth.uid in resource.data.assignedToUids);
                      
      allow create, update, delete: if isSignedIn() && (
                                        isOwner(resource.data.ownerUid) || 
                                        isAdmin() ||
                                        (request.auth.uid in resource.data.assignedToUids)
                                      );
    }
    
    // ATTENDANCE-RELATED RULES
    match /attendance/{attendanceId} {
        allow read, create: if isSignedIn();
        allow update, delete: if isAdmin() || isOwner(resource.data.userId);
    }
  }
}
