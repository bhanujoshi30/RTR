
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if isAuth();
      // Allow users to update their own document (e.g., for language preference)
      allow update: if isAuth() && request.auth.uid == userId;
      // Allow admin to create or delete user documents
      allow create, delete: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /projects/{projectId} {
      // A user can read a project if they own it, are the assigned client, or are listed as a member.
      allow read: if isAuth() && (
        request.auth.uid == resource.data.ownerUid ||
        request.auth.uid == resource.data.clientUid ||
        (resource.data.memberUids != null && request.auth.uid in resource.data.memberUids)
      );

      allow create: if isAuth() && request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isAuth() && request.auth.uid == resource.data.ownerUid;
    }

    match /tasks/{taskId} {
      // Denormalized projectOwnerUid, clientUid, and assignedToUids on each task allows for this rule.
      allow read: if isAuth() && (
        request.auth.uid == resource.data.projectOwnerUid ||
        request.auth.uid == resource.data.clientUid ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow create: if isAuth(); // Create is checked against project ownership in the service function
      allow update: if isAuth() && (
        request.auth.uid == resource.data.ownerUid ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow delete: if isAuth() && request.auth.uid == resource.data.ownerUid;
    }

    match /tasks/{taskId}/attachments/{attachmentId} {
      allow read: if isAuth();
      allow write: if isAuth(); // Permissions checked in service logic
    }
    
    match /tasks/{taskId}/timeline/{eventId} {
      allow read: if isAuth();
      allow create: if isAuth(); // Logic handled by backend
    }

    match /issues/{issueId} {
      // Denormalized projectOwnerUid, clientUid and assignedToUids on each issue allows for this rule.
      allow read: if isAuth() && (
        request.auth.uid == resource.data.projectOwnerUid ||
        request.auth.uid == resource.data.clientUid ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow create: if isAuth(); // Checked in service logic
      allow update: if isAuth() && (
        request.auth.uid == resource.data.ownerUid ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow delete: if isAuth() && request.auth.uid == resource.data.ownerUid;
    }

    match /attendance/{attendanceId} {
      allow read: if isAuth(); // Admin checks done in service code
      allow create: if isAuth();
    }
  }
}
