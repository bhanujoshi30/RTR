rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isSignedIn() && 'role' in getUserData() && getUserData().role == 'admin';
    }

    function isProjectClient(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isSignedIn() && 'clientUid' in projectData && request.auth.uid == projectData.clientUid;
    }

    // New helper function to check if the current user is a member of a project
    function isProjectMember(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isSignedIn() && 'memberUids' in projectData && request.auth.uid in projectData.memberUids;
    }


    // Projects Collection
    match /projects/{projectId} {
      allow get: if request.auth.uid == resource.data.ownerUid || request.auth.uid == resource.data.clientUid || request.auth.uid in resource.data.memberUids;
      allow list: if isSignedIn(); // List queries are secured by `where` clauses in app code
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());
      allow delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());
    }

    // Tasks Collection
    match /tasks/{taskId} {
      // The fix is here: add isProjectMember() to allow supervisors/members to view main tasks
      // of projects they are part of.
      allow get: if isSignedIn() && (
                   isUser(resource.data.ownerUid) ||
                   (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
                   isUser(resource.data.projectOwnerUid) ||
                   isProjectClient(resource.data.projectId) ||
                   isProjectMember(resource.data.projectId) ||
                   isAdmin()
                 );
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
                      isUser(resource.data.ownerUid) ||
                      (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
                      isAdmin()
                    );
      allow delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());

      // Subcollections
      match /attachments/{attachmentId} {
        allow read, create: if isSignedIn();
        allow update, delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());
      }
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
    }

    // Issues Collection
    match /issues/{issueId} {
      allow list: if isSignedIn();
      allow get: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
                      isUser(resource.data.ownerUid) ||
                      (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids) ||
                      isAdmin()
                    );
      allow delete: if isSignedIn() && (isUser(resource.data.ownerUid) || isAdmin());
    }
    
    // Attendance Collection
    match /attendance/{attendanceId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}
