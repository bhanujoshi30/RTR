
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /projects/{projectId} {
      // Helper functions for project-level roles
      function isOwner() {
        return isUser(resource.data.ownerUid);
      }
      function isClient() {
        return resource.data.clientUid != null && isUser(resource.data.clientUid);
      }
      function isMember() {
        return isSignedIn() && request.auth.uid in resource.data.memberUids;
      }
      
      // Read access: Owner, Client, Member, or Admin can read.
      allow get: if isOwner() || isClient() || isMember() || isAdmin();
      
      // List access: Allow querying by owner or client. Members are handled by application logic fetching assigned tasks first.
      allow list: if (isUser(request.query.ownerUid) || isUser(request.query.clientUid) || isAdmin());

      // Write access: Only the owner or an admin can create, update, or delete projects.
      allow create, update, delete: if isOwner() || isAdmin();
    }

    match /tasks/{taskId} {
      let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
      let projectData = get(/databases/$(database)/documents/projects/$(taskData.projectId)).data;

      // Read access:
      // - Admin
      // - Project Owner
      // - Project Client
      // - A user assigned to this task (if it's a sub-task)
      allow get: if isAdmin() || 
                    isUser(projectData.ownerUid) || 
                    (projectData.clientUid != null && isUser(projectData.clientUid)) ||
                    (isSignedIn() && request.auth.uid in taskData.assignedToUids);

      // List access (e.g., fetching all tasks for a project):
      // - Admin
      // - Project Owner
      // - Client (can see non-collection tasks)
      // - A user assigned to a task in the project can query for their own tasks.
      allow list: if isAdmin() ||
                     isUser(request.query.projectOwnerUid) ||
                     (request.query.clientUid != null && isUser(request.query.clientUid)) ||
                     (isSignedIn() && request.query.assignedToUids_array_contains == request.auth.uid);

      // Create access:
      // Admins and Project Owners can create any task.
      allow create: if isAdmin() || isUser(request.resource.data.projectOwnerUid);

      // Update access:
      // - Admin
      // - Project Owner
      // - Task Owner
      // - Users assigned to the task can update specific fields.
      allow update: if isAdmin() || 
                       isUser(projectData.ownerUid) || 
                       isUser(taskData.ownerUid) ||
                       (isSignedIn() && request.auth.uid in taskData.assignedToUids);

      // Delete access: Only the task owner or an admin can delete.
      allow delete: if isAdmin() || isUser(taskData.ownerUid);

      match /timeline/{eventId} {
        // Timeline events can be read by anyone who can read the parent task.
        allow read: if parent.get(path /databases/$(database)/documents/tasks/$(taskId)).exists() &&
                       (isAdmin() || isUser(get(path /databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid) ||
                       (isSignedIn() && request.auth.uid in get(path /databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids));
        // Only allow backend/trusted processes to write timeline events
        allow write: if false; 
      }
      match /attachments/{attachmentId} {
        // Attachments can be read by anyone who can read the parent task.
        allow read: if parent.get(path /databases/$(database)/documents/tasks/$(taskId)).exists() &&
                       (isAdmin() || isUser(get(path /databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid) ||
                       (isSignedIn() && request.auth.uid in get(path /databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids));
        // Only allow backend/trusted processes to write attachments.
        allow write: if false;
      }
    }
    
    match /issues/{issueId} {
        let issueData = get(/databases/$(database)/documents/issues/$(issueId)).data;
        let taskData = get(/databases/$(database)/documents/tasks/$(issueData.taskId)).data;
        let projectData = get(/databases/$(database)/documents/projects/$(issueData.projectId)).data;

        function isIssueParticipant() {
          return isSignedIn() && 
                 (request.auth.uid == issueData.ownerUid || 
                  request.auth.uid in issueData.assignedToUids);
        }

        // Read access:
        // - Admin
        // - Project Owner
        // - Project Client
        // - Issue owner or anyone assigned to the issue.
        allow get: if isAdmin() || 
                      isUser(projectData.ownerUid) || 
                      (projectData.clientUid != null && isUser(projectData.clientUid)) ||
                      isIssueParticipant();

        // List access (e.g., getting all issues for a task):
        // Access is primarily controlled by who can access the parent task.
        // The service logic filters this further.
        allow list: if isAdmin() ||
                       isUser(request.query.projectOwnerUid) ||
                       (isSignedIn() && request.query.assignedToUids_array_contains == request.auth.uid);
        
        // Create, Update, Delete access:
        allow create, update, delete: if isIssueParticipant() || isUser(projectData.ownerUid) || isAdmin();
    }
    
    match /attendance/{attendanceId} {
        // Admins can read any attendance record.
        // Users can read their own attendance records.
        allow read: if isAdmin() || isUser(resource.data.userId);

        // Users can only create their own attendance records.
        allow create: if isUser(request.resource.data.userId);

        // No one can update or delete attendance records from the client.
        allow update, delete: if false;
    }
  }
}
