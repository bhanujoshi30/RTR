
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUserRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isResourceOwner() {
      return isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }

    function isRequestingOwnDocument(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Matches any document in the 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      // Only an admin can update/delete user roles.
      // A user can create their own document upon first sign-in (handled by AuthProvider).
      allow create: if isRequestingOwnDocument(userId);
      allow update, delete: if isUserRole('admin');
    }

    // Matches any document in the 'projects' collection
    match /projects/{projectId} {
      // Let any authenticated user read project data. 
      // The application queries are responsible for showing only relevant projects.
      // This is crucial for supervisors/members to be able to see project names they are assigned to via sub-tasks.
      allow read: if isSignedIn();
      
      // Write permissions are strict: only the owner can modify.
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isResourceOwner();
    }
    
    // Matches any document in the 'tasks' collection
    match /tasks/{taskId} {
      // Allow any authenticated user to read tasks.
      // Queries in the app will ensure users only see tasks from projects they're involved in.
      allow read: if isSignedIn();

      // Only the owner of the project can create a task within it.
      allow create: if get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;
      
      // Update: The project owner OR a user assigned to the task can update it.
      // The application layer should enforce *which* fields an assigned user can update.
      allow update: if get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerUid == request.auth.uid || request.auth.uid in resource.data.assignedToUids;
      
      // Delete: Only the project owner can delete tasks.
      allow delete: if get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.ownerUid == request.auth.uid;
      
      // Sub-collections
      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false; // Append-only
      }

      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if request.auth.uid == request.resource.data.ownerUid;
        allow delete: if request.auth.uid == resource.data.ownerUid;
      }
    }

    // Matches any document in the 'issues' collection
    match /issues/{issueId} {
      // Allow any authenticated user to read issues.
      allow read: if isSignedIn();

      // Creator must own parent task or be assigned to it.
      allow create: if get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids;
      
      // Updater must own the issue or be assigned to it.
      allow update: if resource.data.ownerUid == request.auth.uid || request.auth.uid in resource.data.assignedToUids;

      // Only the issue creator can delete it.
      allow delete: if isResourceOwner();
    }

    // Matches any document in the 'attendance' collection
    match /attendance/{attendanceId} {
      // Admins can read all records. Users can only read their own.
      allow read: if isUserRole('admin') || request.auth.uid == resource.data.userId;
      
      // A user can only create their own attendance record.
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // Nobody can update or delete attendance records.
      allow update, delete: if false;
    }
  }
}
