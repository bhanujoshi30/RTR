
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(doc) {
      return request.auth.uid == doc.data.ownerUid;
    }

    function isClient(doc) {
      return request.auth.uid == doc.data.clientUid;
    }
    
    function isAdmin() {
      // Check the user's custom claim or their role in the /users collection
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Projects Collection
    match /projects/{projectId} {
      // Any authenticated user can read project-level metadata.
      // Granular access control is handled at the task/issue level.
      allow read: if request.auth != null;

      // Only the project owner or an admin can create/update/delete a project.
      allow create: if isOwner(request.resource);
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource);
    }

    // Tasks Collection
    match /tasks/{taskId} {
      function isOwnerOfParentProject() {
        return request.auth.uid == get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid;
      }

      function isClientOfParentProject() {
        return request.auth.uid == get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.clientUid;
      }
      
      function isAssignedToTask() {
        return request.auth.uid in resource.data.assignedToUids;
      }
      
      function isOwnerOfTask() {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow read: if isOwnerOfParentProject() || isAssignedToTask() || isClientOfParentProject();
      allow create: if isOwnerOfParentProject();
      
      function canUpdateTask() {
        // Owner of the task can always update
        if (isOwnerOfTask()) {
          return true;
        }
        // Assigned users can update status/description of sub-tasks
        if (resource.data.parentId != null && isAssignedToTask()) {
          let allowedUpdates = ['status', 'description', 'dueDate', 'updatedAt'];
          return request.resource.data.keys().hasOnly(allowedUpdates);
        }
        return false;
      }
      
      allow update: if canUpdateTask();
      allow delete: if isOwnerOfTask();

      // Timeline subcollection
      match /timeline/{eventId} {
        allow read: if isOwnerOfParentProject() || isAssignedToTask() || isClientOfParentProject();
        allow create: if request.auth != null; // Logged by any involved user
      }

      // Attachments subcollection
      match /attachments/{attachmentId} {
         allow read: if isOwnerOfParentProject() || isAssignedToTask() || isClientOfParentProject();
         allow create: if request.auth != null; // Logged by any involved user
         allow delete: if request.auth.uid == resource.data.ownerUid; // Only attachment owner can delete
      }
    }

    // Issues Collection
    match /issues/{issueId} {
      function isOwnerOfIssue() {
        return request.auth.uid == resource.data.ownerUid;
      }

      function isAssignedToIssue() {
        return request.auth.uid in resource.data.assignedToUids;
      }
      
      function isRelatedToProject() {
        let project = get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data;
        return request.auth.uid == project.ownerUid || request.auth.uid == project.clientUid;
      }

      allow read: if isRelatedToProject() || isAssignedToIssue() || isOwnerOfIssue();
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update: if isOwnerOfIssue() || isAssignedToIssue();
      allow delete: if isOwnerOfIssue();
    }
    
    // Attendance Collection
    match /attendance/{recordId} {
        allow read: if isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Users Collection
    match /users/{userId} {
      // A user can read/update their own profile.
      // An admin can read/update any user profile.
      allow read, update: if request.auth.uid == userId || isAdmin();
      
      // Only an admin can create or delete user documents.
      allow create, delete: if isAdmin();
    }
  }
}
