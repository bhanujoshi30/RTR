
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // PROJECTS Collection
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;
    }

    // TASKS Collection
    match /tasks/{taskId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid;
      
      allow update: if request.auth != null && (request.auth.uid == resource.data.ownerUid || request.auth.uid in resource.data.assignedToUids);
      
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;

      // Sub-collections of Tasks
      match /attachments/{attachmentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      }

      match /timeline/{eventId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow delete: if request.auth != null && request.auth.uid == resource.data.author.uid; 
      }
    }
    
    // ISSUES Collection
    match /issues/{issueId} {
        allow read: if request.auth != null;
        
        allow create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids);
        
        allow update: if request.auth != null && (request.auth.uid == resource.data.ownerUid || request.auth.uid in resource.data.assignedToUids);
        
        // This rule allows the issue creator OR the overall project owner to delete the issue.
        // This is crucial for allowing a project owner to clean up all sub-data when deleting a project.
        allow delete: if request.auth != null && (request.auth.uid == resource.data.ownerUid || request.auth.uid == resource.data.projectOwnerUid);
    }

    // USERS Collection
    match /users/{userId} {
      allow read: if request.auth != null;
      // Only admins can create, update, or delete user documents
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ATTENDANCE Collection
    match /attendance/{attendanceId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
