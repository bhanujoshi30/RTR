
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isAdmin();
      // Allow user to update their own language, otherwise only admin can update
      allow update: if (request.auth.uid == userId && request.resource.data.keys().hasOnly(['preferredLanguage', 'updatedAt'])) || isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // PROJECTS collection
    match /projects/{projectId} {
      let project = get(/databases/$(database)/documents/projects/$(projectId));
      let isOwner = request.auth.uid == project.data.ownerUid;
      let isClient = project.data.clientUid != null && request.auth.uid == project.data.clientUid;
      let isMember = request.auth.uid in project.data.memberUids;

      allow read: if request.auth != null && (isAdmin() || isOwner || isClient || isMember);
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isAdmin() || isOwner;
    }

    // TASKS collection
    match /tasks/{taskId} {
      let task = resource.data;
      let isOwner = request.auth.uid == task.ownerUid;
      let isAssigned = request.auth.uid in task.assignedToUids;
      
      function canReadParentProject() {
        let project = get(/databases/$(database)/documents/projects/$(task.projectId));
        return (
          (request.auth.uid == project.data.ownerUid) ||
          (project.data.clientUid != null && request.auth.uid == project.data.clientUid) ||
          (request.auth.uid in project.data.memberUids)
        );
      }

      allow read: if request.auth != null && (isAdmin() || canReadParentProject());
      allow create: if isAdmin() || get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;
      allow update: if isAdmin() || isOwner || isAssigned;
      allow delete: if isAdmin() || isOwner;

      // Subcollections of TASKS
      match /attachments/{attachmentId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids || isAdmin();
        allow create, delete: if request.auth != null;
      }

      match /timeline/{eventId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids || isAdmin();
        allow create: if request.auth != null;
        allow update, delete: if false; // Timeline events are immutable
      }
    }

    // ISSUES collection
    match /issues/{issueId} {
      let issue = resource.data;
      let parentTask = get(/databases/$(database)/documents/tasks/$(issue.taskId));
      let isOwner = request.auth.uid == issue.ownerUid;
      let isAssignedToParentTask = request.auth.uid in parentTask.data.assignedToUids;
      
      allow read: if request.auth != null && (get(parentTask.ref).data.ownerUid == request.auth.uid || request.auth.uid in get(parentTask.ref).data.assignedToUids || isAdmin() || get(/databases/$(database)/documents/projects/$(parentTask.data.projectId)).data.ownerUid == request.auth.uid);
      allow create, update: if isAdmin() || isOwner || isAssignedToParentTask;
      allow delete: if isAdmin() || isOwner;
    }
    
    // ATTENDANCE collection
    match /attendance/{attendanceId} {
        allow read: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAdmin();
    }
  }
}
