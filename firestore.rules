
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    // Checks if the user is assigned to the task/issue
    function isAssigned(uid, uids) {
      return uid in uids;
    }

    match /users/{userId} {
      allow read: if isAuth();
      // Allow user to edit their own doc, or an admin to edit any doc.
      allow write: if request.auth.uid == userId 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /projects/{projectId} {
      allow read: if isAuth();
      allow create: if isAuth(); // Creator is set to request.auth.uid in service code
      // Allow owner or admin to update
      allow update: if request.auth.uid == resource.data.ownerUid 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Only owner can delete
      allow delete: if request.auth.uid == resource.data.ownerUid;
    }

    match /tasks/{taskId} {
      // Allow reading if you are the project owner OR assigned to the task.
      allow read: if request.auth.uid == resource.data.projectOwnerUid 
                 || isAssigned(request.auth.uid, resource.data.assignedToUids);
                 
      // Allow creating if you own the parent project.
      allow create: if request.auth.uid == get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid;
      
      // Allow updating if you are the task owner or assigned to it.
      allow update: if request.auth.uid == resource.data.ownerUid 
                    || isAssigned(request.auth.uid, resource.data.assignedToUids);
                    
      // Only task owner can delete.
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // Subcollections
      match /timeline/{eventId} {
        allow read, create: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid
                    || isAssigned(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
      }
      
      match /attachments/{attachmentId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid
                    || isAssigned(request.auth.uid, get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
        allow create: if isAuth(); // Detailed creator check is done in service code
        allow delete: if request.auth.uid == resource.data.ownerUid;
      }
    }

    match /issues/{issueId} {
      // Allow reading if you are the project owner OR assigned to the issue.
      allow read: if request.auth.uid == resource.data.projectOwnerUid 
                 || isAssigned(request.auth.uid, resource.data.assignedToUids);
      
      // Allow creating if you own or are assigned to the parent sub-task.
      allow create: if request.auth.uid == get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid 
                    || isAssigned(request.auth.uid, get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids);
      
      // Allow updating if you are the issue owner or assigned to it.
      allow update: if request.auth.uid == resource.data.ownerUid 
                    || isAssigned(request.auth.uid, resource.data.assignedToUids);
                    
      // Only issue owner can delete.
      allow delete: if request.auth.uid == resource.data.ownerUid;
    }
    
    match /attendance/{attendanceId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if isAuth();
    }
  }
}
