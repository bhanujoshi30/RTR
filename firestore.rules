
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserRole(role) {
      // Use exists() to prevent errors if the user doc doesn't exist yet
      return isUserAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isProjectOwner(projectData) {
      return request.auth.uid == projectData.ownerUid;
    }

    function isProjectClient(projectData) {
        return projectData.clientUid != null && request.auth.uid == projectData.clientUid;
    }

    // --- USERS Collection ---
    match /users/{userId} {
      allow read: if isUserAuthenticated() && (isUserRole('admin') || request.auth.uid == userId);
      allow create: if isUserRole('admin');
      allow update: if isUserAuthenticated() && (isUserRole('admin') || request.auth.uid == userId);
      allow delete: if isUserRole('admin');
    }

    // --- PROJECTS Collection ---
    match /projects/{projectId} {
      // Allow any authenticated user to read project documents.
      // The app's queries are responsible for showing only relevant projects.
      // This is necessary for supervisors/members to read project details they are assigned to via tasks.
      allow read: if isUserAuthenticated();
                     
      allow create: if isUserAuthenticated() && (isUserRole('admin') || !isUserRole('client') && !isUserRole('supervisor') && !isUserRole('member'));
      allow update, delete: if isUserAuthenticated() && (isProjectOwner(resource.data) || isUserRole('admin'));
    }

    // --- TASKS Collection ---
    match /tasks/{taskId} {
      // Read access is granted if the user is an admin, the project owner, the client associated with the project, or is directly assigned to the sub-task.
      allow read: if isUserAuthenticated() &&
                    (isUserRole('admin') ||
                     isProjectOwner(resource.data) ||
                     isProjectClient(resource.data) ||
                     resource.data.assignedToUids.hasAny([request.auth.uid]));

      // Create access is granted to the project owner or an admin.
      allow create: if isUserAuthenticated() && (isProjectOwner(request.resource.data) || isUserRole('admin'));

      // Update access is granted to the project owner, an admin, the task creator, or an assigned user.
      allow update: if isUserAuthenticated() &&
                      (isUserRole('admin') ||
                       isProjectOwner(resource.data) ||
                       request.auth.uid == resource.data.ownerUid ||
                       resource.data.assignedToUids.hasAny([request.auth.uid]));

      // Delete access is granted to the task creator or an admin.
      allow delete: if isUserAuthenticated() && (request.auth.uid == resource.data.ownerUid || isUserRole('admin'));
      
      match /attachments/{attachmentId} {
        allow read, create, delete: if isUserAuthenticated();
      }

      match /timeline/{eventId} {
        allow read, create: if isUserAuthenticated();
        allow delete: if false; // Timeline events are immutable
      }
    }
    
    // --- ISSUES Collection ---
    match /issues/{issueId} {
        // Read access is granted if the user is an admin, project owner, project client, issue creator, or assigned to the issue.
       allow read: if isUserAuthenticated() &&
                    (isUserRole('admin') ||
                     isProjectOwner(resource.data) ||
                     isProjectClient(resource.data) ||
                     request.auth.uid == resource.data.ownerUid ||
                     resource.data.assignedToUids.hasAny([request.auth.uid]));
       
       // Create access is handled by service logic; this rule ensures the creator is at least the project owner or an admin.
       // Supervisors/members creating issues are validated in the service layer against the parent task.
       allow create: if isUserAuthenticated() && (isProjectOwner(request.resource.data) || isUserRole('admin'));

       // Update access is granted to the issue creator, an assigned user, or an admin.
       allow update: if isUserAuthenticated() &&
                       (isUserRole('admin') ||
                        request.auth.uid == resource.data.ownerUid ||
                        resource.data.assignedToUids.hasAny([request.auth.uid]));

       // Delete access is granted to the issue creator or an admin.
       allow delete: if isUserAuthenticated() && (request.auth.uid == resource.data.ownerUid || isUserRole('admin'));
    }

    // --- ATTENDANCE Collection ---
    match /attendance/{recordId} {
      allow read: if isUserRole('admin');
      allow create: if isUserAuthenticated() && (isUserRole('supervisor') || isUserRole('member'));
    }
  }
}
