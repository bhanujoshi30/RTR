rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }

    // Projects Collection
    match /projects/{projectId} {
      allow read: if isAuth(); // Any authenticated user can read project-level details.
      allow create: if isAuth() && isOwner(request.auth.uid);
      allow update: if isAuth() && isOwner(resource.data.ownerUid);
      allow delete: if isAuth() && isOwner(resource.data.ownerUid);

      // Tasks Subcollection (deprecated, use top-level 'tasks' collection)
      match /tasks/{taskId} {
        allow read, write, delete: if false; // Disallow use of this subcollection
      }
    }

    // Tasks Collection
    match /tasks/{taskId} {
      allow read: if isAuth() && (
        isOwner(resource.data.projectOwnerUid) ||
        isOwner(resource.data.clientUid) ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow create: if isAuth();
      allow update: if isAuth() && (
        isOwner(resource.data.ownerUid) || // Task owner
        request.auth.uid in resource.data.assignedToUids // Assigned member
      );
      allow delete: if isAuth() && isOwner(resource.data.ownerUid);

      // Attachments Subcollection
      match /attachments/{attachmentId} {
        allow read: if isAuth();
        allow create: if isAuth();
        allow delete: if isAuth() && isOwner(resource.data.ownerUid);
      }

      // Timeline Subcollection
      match /timeline/{eventId} {
        allow read: if isAuth();
        allow create: if isAuth();
      }
    }

    // Issues Collection
    match /issues/{issueId} {
      allow read: if isAuth() && (
        isOwner(resource.data.projectOwnerUid) ||
        isOwner(resource.data.clientUid) ||
        request.auth.uid in resource.data.assignedToUids
      );
      allow create: if isAuth();
      allow update: if isAuth() && (
        isOwner(resource.data.ownerUid) || // Issue owner
        request.auth.uid in resource.data.assignedToUids // Assigned member
      );
      allow delete: if isAuth() && isOwner(resource.data.ownerUid);
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth();
      allow delete: if isAuth();
    }

    // Attendance Collection
    match /attendance/{recordId} {
        allow read: if isAuth();
        allow create: if isAuth();
    }
  }
}
