
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if a user has a specific role
    function isUserRole(uid, role) {
      // This lookup is OK for targeted rules, but not for collection queries.
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.role == role;
    }

    // User documents can be read by any signed-in user to get display names,
    // but only modified by admins. A user can create their own doc during signup.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isUserRole(request.auth.uid, 'admin');
    }

    // Project documents can be read by any authenticated user.
    // The application's queries are responsible for only showing projects
    // relevant to the user (owned, assigned as client, or containing assigned tasks).
    // This solves the permission issue where supervisors/members need to read project
    // details for projects they are assigned tasks in.
    match /projects/{projectId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    // Tasks can be read by any authenticated user.
    // As with projects, this allows dashboard queries from supervisors/members to succeed.
    // The app logic ensures users only see tasks relevant to them.
    // Write permissions remain strict.
    match /tasks/{taskId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() && 
        // The creator must be the owner of the project the task is in.
        get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.ownerUid == request.auth.uid;

      allow update: if isSignedIn() &&
        // The project owner, task owner, or an assigned member can update a task.
        (resource.data.projectOwnerUid == request.auth.uid ||
         resource.data.ownerUid == request.auth.uid ||
         request.auth.uid in resource.data.assignedToUids);

      allow delete: if isSignedIn() &&
        // Only the task owner or project owner can delete.
        (resource.data.ownerUid == request.auth.uid ||
         resource.data.projectOwnerUid == request.auth.uid);
      
      // Subcollections for timeline and attachments
      match /timeline/{eventId} {
        allow read, write: if isSignedIn(); // Allow reading/writing if parent task is accessible
      }

      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      }
    }

    // Issues can be read by any authenticated user. App logic handles visibility.
    match /issues/{issueId} {
      allow read: if isSignedIn();
      
      allow create: if isSignedIn() && (
        // The creator must be associated with the parent task.
        let task = get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId));
        task.data.ownerUid == request.auth.uid || request.auth.uid in task.data.assignedToUids
      );

      allow update, delete: if isSignedIn() &&
        (resource.data.projectOwnerUid == request.auth.uid ||
         resource.data.ownerUid == request.auth.uid ||
         request.auth.uid in resource.data.assignedToUids);
    }
    
    // Attendance records can only be created by the user themselves.
    // Only admins can read the full list of attendance records.
    match /attendance/{recordId} {
      allow read: if isUserRole(request.auth.uid, 'admin');
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Attendance records are immutable
    }
  }
}
