
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isProjectOwner(projectId) {
      // Use exists() for safety
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }
    
    function isMemberOfProject(projectId) {
        // Check if the user's UID is in the project's memberUids array.
        return exists(/databases/$(database)/documents/projects/$(projectId)) &&
               request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    function isAdmin() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Projects can be read by any authenticated user.
    // Write access is restricted.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.auth.uid);
      // Owner or an admin can update project details. This is needed for admins to create tasks.
      allow update: if isProjectOwner(projectId) || isAdmin();
      allow delete: if isProjectOwner(projectId);
    }

    // Tasks can be read by the project owner or a member of the project.
    match /tasks/{taskId} {
      allow read: if isProjectOwner(resource.data.projectId) || isMemberOfProject(resource.data.projectId);
      
      // An Admin or the project owner can create tasks.
      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();

      // Task owner can update. Assigned user can update limited fields on a sub-task.
      allow update: if isOwner(resource.data.ownerUid) || (request.auth.uid in resource.data.assignedToUids && resource.data.parentId != null);

      // Only the task owner can delete it.
      allow delete: if isOwner(resource.data.ownerUid);
    }

    // Issues can be read by the project owner or a member of the project.
    match /issues/{issueId} {
      allow read: if isProjectOwner(resource.data.projectId) || isMemberOfProject(resource.data.projectId);
      
      // A project member can create an issue.
      allow create: if isMemberOfProject(request.resource.data.projectId) || isProjectOwner(request.resource.data.projectId);

      // Only the issue creator can modify or delete it.
      allow update, delete: if isOwner(resource.data.ownerUid);
    }
    
    // Attachments are nested under tasks.
    match /tasks/{taskId}/attachments/{attachmentId} {
        allow read, create: if isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) || isMemberOfProject(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId);
        allow delete: if isOwner(resource.data.ownerUid);
    }

    // Timeline events are nested under tasks.
    match /tasks/{taskId}/timeline/{eventId} {
        allow read: if isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) || isMemberOfProject(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId);
        allow create: if isOwner(request.resource.data.author.uid);
        allow update, delete: if false; // Timeline events are immutable
    }

    // Users collection can be read by any authenticated user for display names, etc.
    // Only admins can write/delete, and users can update their own language pref.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, delete: if isAdmin();
      allow update: if isOwner(userId) || isAdmin();
    }

    // Attendance records
    match /attendance/{recordId} {
        allow read: if isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if false;
    }
  }
}
