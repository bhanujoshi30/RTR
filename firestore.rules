
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && getUserData(request.auth.uid).role == 'admin';
    }

    function getProjectData(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data;
    }

    function isProjectOwner(projectId) {
      return isSignedIn() && request.auth.uid == getProjectData(projectId).ownerUid;
    }

    function isProjectClient(projectId) {
      let projectData = getProjectData(projectId);
      return isSignedIn() && projectData.clientUid != null && request.auth.uid == projectData.clientUid;
    }
    
    function isProjectMember(projectId) {
      let projectData = getProjectData(projectId);
      return isSignedIn() && request.auth.uid in projectData.memberUids;
    }

    function getTaskData(taskId) {
        return get(/databases/$(database)/documents/tasks/$(taskId)).data;
    }
    
    function isTaskOwner(taskId) {
        return isSignedIn() && request.auth.uid == getTaskData(taskId).ownerUid;
    }

    function isTaskAssignee(taskId) {
        return isSignedIn() && request.auth.uid in getTaskData(taskId).assignedToUids;
    }

    // Projects Collection
    match /projects/{projectId} {
      allow get: if isProjectOwner(projectId) || isProjectClient(projectId) || isProjectMember(projectId) || isAdmin();
      
      allow list: if isAdmin() || 
                     (isSignedIn() && request.query.where.find(p => p[0] == 'ownerUid' && p[1] == '==' && p[2] == request.auth.uid) != null) ||
                     (isSignedIn() && request.query.where.find(p => p[0] == 'clientUid' && p[1] == '==' && p[2] == request.auth.uid) != null) ||
                     (isSignedIn() && request.query.where.find(p => p[0] == 'memberUids' && p[1] == 'array-contains' && p[2] == request.auth.uid) != null);
      
      allow create: if isSignedIn() && (request.resource.data.ownerUid == request.auth.uid || isAdmin());
      allow update, delete: if isProjectOwner(projectId) || isAdmin();
    }

    // Tasks Collection
    match /tasks/{taskId} {
      allow get: if isTaskOwner(taskId) || isProjectMember(getTaskData(taskId).projectId) || isProjectClient(getTaskData(taskId).projectId) || isAdmin();

      // Broad list access for authenticated users is acceptable here because:
      // 1. The `get` rule is strict, preventing unauthorized access to task details.
      // 2. The UI is designed to only query for relevant tasks (e.g., by project, by user assignment),
      //    so users won't see tasks they aren't supposed to in the app.
      // This rule unblocks count queries and timeline aggregations that were failing.
      allow list: if isSignedIn();
      
      allow create: if isProjectOwner(request.resource.data.projectId) || isProjectMember(request.resource.data.projectId) || isAdmin();
      allow update: if isTaskOwner(taskId) || isTaskAssignee(taskId) || isAdmin();
      allow delete: if isTaskOwner(taskId) || isAdmin();

      // Subcollections for timeline and attachments
      match /{subcollection}/{documentId} {
        allow read, list: if isSignedIn(); // Gated by access to parent task
        allow create: if isTaskOwner(taskId) || isTaskAssignee(taskId) || isAdmin();
        allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.ownerUid || isAdmin());
      }
    }
    
    // Issues Collection
    match /issues/{issueId} {
      allow get: if isTaskOwner(resource.data.taskId) || isTaskAssignee(resource.data.taskId) || isAdmin();
      
      // Broad list access for the same reasons as tasks. Get is the main security gate.
      allow list: if isSignedIn();

      allow create: if isTaskOwner(request.resource.data.taskId) || isTaskAssignee(request.resource.data.taskId) || isAdmin();
      allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.ownerUid || isAdmin());
    }
    
    // Users Collection
    match /users/{userId} {
      allow read, get: if isSignedIn();
      allow list: if isAdmin();
      allow create, update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }
  }
}
