rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }
    
    function getProjectData(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data;
    }
    
    function isProjectOwner(projectId) {
        return isSignedIn() && request.auth.uid == getProjectData(projectId).ownerUid;
    }

    function isProjectClient(projectId) {
        return isSignedIn() && request.auth.uid == getProjectData(projectId).clientUid;
    }
    
    function isProjectMember(projectId) {
        let projectData = getProjectData(projectId);
        // Check if the user is the owner, client, or in the memberUids list
        return request.auth.uid == projectData.ownerUid || 
               request.auth.uid == projectData.clientUid ||
               (projectData.memberUids != null && request.auth.uid in projectData.memberUids);
    }
    
    // USERS collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || isUser(userId);
    }

    // PROJECTS collection
    match /projects/{projectId} {
      // Split read into get and list for query security
      allow get: if isProjectOwner(projectId) || isProjectClient(projectId) || isAdmin() || (getProjectData(projectId).memberUids != null && request.auth.uid in getProjectData(projectId).memberUids);
      allow list: if isAdmin() || (isSignedIn() && (
                    request.query.resource.data.ownerUid == request.auth.uid || 
                    request.query.resource.data.clientUid == request.auth.uid
                  ));
      
      allow create: if isSignedIn() && (request.resource.data.ownerUid == request.auth.uid || isAdmin());
      allow update, delete: if isProjectOwner(projectId) || isAdmin();
    }
    
    // TASKS collection
    match /tasks/{taskId} {
      function getTaskData() {
        return resource.data;
      }
      
      function isTaskOwner() {
        return request.auth.uid == getTaskData().ownerUid;
      }
      
      function isAssignedToTask() {
        return request.auth.uid in getTaskData().assignedToUids;
      }
      
      allow read: if isAdmin() || isProjectOwner(getTaskData().projectId) || isProjectClient(getTaskData().projectId) || isAssignedToTask() || (getTaskData().memberUids != null && request.auth.uid in getTaskData().memberUids);
      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();
      allow update: if isTaskOwner() || isAssignedToTask() || isAdmin();
      allow delete: if isTaskOwner() || isAdmin();

      // Subcollections of Tasks
      match /{allPaths=**} {
        allow read, write: if isProjectOwner(getTaskData().projectId) || isAdmin() || isAssignedToTask() || isTaskOwner();
      }
    }
    
     // ISSUES collection
    match /issues/{issueId} {
        function getIssueData() {
            return resource.data;
        }

        function isIssueOwner() {
            return request.auth.uid == getIssueData().ownerUid;
        }

        function isAssignedToIssue() {
            return request.auth.uid in getIssueData().assignedToUids;
        }

        allow read, create: if isSignedIn() && (isProjectOwner(getIssueData().projectId) || isProjectClient(getIssueData().projectId) || isAssignedToIssue());
        allow update, delete: if isIssueOwner() || isAdmin();
    }
    
    // ATTENDANCE collection
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
    }
  }
}
