
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAdmin() {
      // Checks if the requesting user has the 'admin' role in their user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(doc) {
      // Checks if the requesting user is the owner of a document.
      return request.auth.uid == doc.data.ownerUid;
    }
    
    function isProjectOwner(projectId) {
      // Checks if the requesting user is the owner of a specific project.
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;
    }

    function isProjectClient(projectId) {
      // Checks if the requesting user is the client associated with a specific project.
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.clientUid;
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // PROJECTS
    match /projects/{projectId} {
      // Any authenticated user can see project high-level details.
      // This is necessary for the dashboard to function for members.
      // Sensitive data is secured in the sub-collections.
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource);
    }

    // TASKS & SUB-COLLECTIONS
    match /tasks/{taskId} {
      allow read: if isProjectOwner(resource.data.projectId) ||
                      isProjectClient(resource.data.projectId) ||
                      request.auth.uid in resource.data.assignedToUids ||
                      isOwner(resource) ||
                      isAdmin();
                      
      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();
      
      // Allow owners/admins to edit, and assigned users to make limited changes.
      allow update: if isOwner(resource) || 
                       isAdmin() ||
                       (request.auth.uid in resource.data.assignedToUids);
                       
      allow delete: if isOwner(resource);

      // TIMELINE (sub-collection of tasks)
      match /timeline/{eventId} {
        allow read: if get( /databases/$(database)/documents/tasks/$(taskId) ).data.ownerUid == request.auth.uid ||
                       request.auth.uid in get( /databases/$(database)/documents/tasks/$(taskId) ).data.assignedToUids ||
                       isProjectOwner(get( /databases/$(database)/documents/tasks/$(taskId) ).data.projectId) ||
                       isProjectClient(get( /databases/$(database)/documents/tasks/$(taskId) ).data.projectId) ||
                       isAdmin();
        allow create: if request.auth != null; // Created by backend logic
        allow update, delete: if false; // Timeline is immutable
      }

      // ATTACHMENTS (sub-collection of tasks)
       match /attachments/{attachmentId} {
        allow read: if get( /databases/$(database)/documents/tasks/$(taskId) ).data.ownerUid == request.auth.uid ||
                       request.auth.uid in get( /databases/$(database)/documents/tasks/$(taskId) ).data.assignedToUids ||
                       isProjectOwner(get( /databases/$(database)/documents/tasks/$(taskId) ).data.projectId) ||
                       isProjectClient(get( /databases/$(database)/documents/tasks/$(taskId) ).data.projectId) ||
                       isAdmin();
        allow create: if request.auth.uid == request.resource.data.ownerUid;
        allow delete: if request.auth.uid == resource.data.ownerUid;
      }
    }
    
    // ISSUES
    match /issues/{issueId} {
        function getParentTaskData() {
          return get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data;
        }

        function isParentTaskOwner() {
            return request.auth.uid == getParentTaskData().ownerUid;
        }

        function isParentTaskAssignee() {
            return request.auth.uid in getParentTaskData().assignedToUids;
        }

        allow read: if isProjectOwner(getParentTaskData().projectId) ||
                       isProjectClient(getParentTaskData().projectId) ||
                       isParentTaskOwner() ||
                       isParentTaskAssignee() ||
                       isOwner(resource) ||
                       isAdmin();

        allow create: if isParentTaskOwner() || isParentTaskAssignee();

        allow update, delete: if isOwner(resource);
    }
    
    // ATTENDANCE
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }
  }
}
