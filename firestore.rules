
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the requesting user has the 'admin' role.
    // This is acceptable because it's used in single-document requests (like write),
    // not in collection queries that would be blocked.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for Projects
    match /projects/{projectId} {
      // Any authenticated user can read the high-level details of a project.
      // This is necessary for the dashboard to list projects for assigned members.
      // Sensitive data is stored in subcollections with stricter rules.
      allow read: if request.auth != null;

      // Only the project owner or an admin can create, update, or delete a project.
      allow create: if request.resource.data.ownerUid == request.auth.uid || isAdmin();
      allow update, delete: if resource.data.ownerUid == request.auth.uid || isAdmin();
    }

    // Rules for Tasks
    match /tasks/{taskId} {
      // A user can read a task if they are the project owner OR are directly assigned to it.
      // This rule is efficient because it only uses data within the task document itself.
      allow read: if resource.data.projectOwnerUid == request.auth.uid 
                  || request.auth.uid in resource.data.assignedToUids;

      // A user can create a task if they are the project owner or an admin.
      allow create: if request.resource.data.ownerUid == request.auth.uid || isAdmin();
      
      // A user can update a task if they are the project owner or are assigned to it.
      allow update: if resource.data.ownerUid == request.auth.uid 
                    || request.auth.uid in resource.data.assignedToUids;
      
      // Only the task owner can delete it.
      allow delete: if resource.data.ownerUid == request.auth.uid;

      // Rules for Subcollections of Tasks
      match /{allChildren=**} {
        allow read, write: if resource.data.projectOwnerUid == request.auth.uid 
                           || request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
      }
    }

    // Rules for Issues
    match /issues/{issueId} {
      // A user can read an issue if they are the project owner OR are assigned to it.
      allow read: if resource.data.projectOwnerUid == request.auth.uid 
                  || request.auth.uid in resource.data.assignedToUids;
      
      // A user can create/update an issue if they own the parent task or are assigned to it.
      allow create, update: if get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.ownerUid == request.auth.uid
                            || request.auth.uid in get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.assignedToUids;

      // Only the issue's creator can delete it.
      allow delete: if resource.data.ownerUid == request.auth.uid;
    }

    // Rules for Users
    match /users/{userId} {
      // Any authenticated user can read the list of other users. This is acceptable
      // for this internal tool to allow assignment features to work correctly.
      allow read: if request.auth != null;
      
      // An admin can write to any user document. A user can only write to their own.
      allow write: if isAdmin() || request.auth.uid == userId;
    }
    
    // Rules for Attendance
    match /attendance/{attendanceId} {
        // A user can create their own attendance record.
        allow create: if request.resource.data.userId == request.auth.uid;
        
        // Only admins can read attendance records.
        allow read: if isAdmin();
        
        // No one can update or delete attendance records to maintain data integrity.
        allow update, delete: if false;
    }
  }
}
