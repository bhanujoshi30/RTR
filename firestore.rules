
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    function isClient(uid) {
      return request.auth.uid == uid;
    }
    function isMember(memberUids) {
      return request.auth.uid in memberUids;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isSupervisor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'supervisor';
    }
    function isMemberRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'member';
    }
    function isAssignedToTask(assignedUids) {
      return request.auth.uid in assignedUids;
    }
    function isAssignedToIssue(assignedUids) {
      return request.auth.uid in assignedUids;
    }
    function isOwnerOfParentTask(taskId) {
      return get(/databases/$(database)/documents/tasks/$(taskId)).data.ownerUid == request.auth.uid;
    }
    function isAssignedToParentTask(taskId) {
      let taskData = get(/databases/$(database)/documents/tasks/$(taskId)).data;
      return request.auth.uid in taskData.assignedToUids;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && (isAdmin() || isOwner(userId)); // Allow users to update their own profile, e.g. language
      allow delete: if isSignedIn() && isAdmin() && request.auth.uid != userId;
    }

    // Collection: projects
    match /projects/{projectId} {
      allow read: if isSignedIn() && (isOwner(resource.data.ownerUid) || isClient(resource.data.clientUid) || isMember(resource.data.memberUids));
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.ownerUid) || isAdmin());
      allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);

      // Subcollection: tasks (only for main tasks, parentId is null)
      match /tasks/{taskId} {
        allow read: if isSignedIn() &&
                      (isOwner(resource.data.ownerUid) ||
                       isAssignedToTask(resource.data.assignedToUids) ||
                       isOwner(resource.data.projectOwnerUid) ||
                       isClient(resource.data.clientUid));
        allow create: if isSignedIn() && isOwner(resource.data.projectOwnerUid); // Only project owner can create main tasks
        allow update: if isSignedIn() && (isOwner(resource.data.ownerUid) || isAssignedToTask(resource.data.assignedToUids));
        allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);

        // Sub-subcollection: timeline & attachments under tasks
        match /timeline/{eventId} {
            allow read: if isSignedIn(); // Allow any signed in user who can read the task to read timeline
            allow create: if isSignedIn(); // Logic in backend ensures only authorized users can write
        }
        match /attachments/{attachmentId} {
            allow read: if isSignedIn();
            allow create: if isSignedIn();
            allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);
        }
      }
    }
    
    // Root Collection: tasks
    match /tasks/{taskId} {
       allow read: if isSignedIn() &&
                      (isOwner(resource.data.ownerUid) ||
                       isAssignedToTask(resource.data.assignedToUids) ||
                       isOwner(resource.data.projectOwnerUid) ||
                       isClient(resource.data.clientUid));
       allow create: if isSignedIn() && (isOwnerOfParentTask(request.resource.data.parentId) || isAdmin());
       allow update: if isSignedIn() && (isOwner(resource.data.ownerUid) || isAssignedToTask(resource.data.assignedToUids));
       allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);
    }

    // Root Collection: issues
    match /issues/{issueId} {
      allow read: if isSignedIn() &&
                      (isOwner(resource.data.ownerUid) ||
                       isAssignedToIssue(resource.data.assignedToUids) ||
                       isOwner(resource.data.projectOwnerUid) ||
                       isClient(resource.data.clientUid));
      allow create: if isSignedIn() &&
                        (isAssignedToParentTask(request.resource.data.taskId) ||
                         isOwnerOfParentTask(request.resource.data.taskId) ||
                         isAdmin());
      allow update: if isSignedIn() &&
                        (isOwner(resource.data.ownerUid) || isAssignedToIssue(resource.data.assignedToUids) || isAdmin());
      allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);
    }
    
    // Root Collection: attendance
    match /attendance/{attendanceId} {
        allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
  }
}
