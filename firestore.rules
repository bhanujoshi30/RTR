
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }


    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }

    function getProject(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId));
    }

    function getProjectData(projectId) {
      return getProject(projectId).data;
    }

    function isProjectOwner(projectId) {
      return isUser(getProjectData(projectId).ownerUid);
    }
    
    function isProjectClient(projectId) {
      return isSignedIn() && request.auth.uid == getProjectData(projectId).clientUid;
    }

    function isProjectMember(projectId) {
      return isSignedIn() && request.auth.uid in getProjectData(projectId).get('memberUids', []);
    }

    function getTask(taskId) {
      return get(/databases/$(database)/documents/tasks/$(taskId));
    }

    function getTaskData(taskId) {
        return getTask(taskId).data;
    }
    
    function isTaskOwner(taskId) {
        return isUser(getTaskData(taskId).ownerUid);
    }

    function isTaskAssignee(taskId) {
        return isSignedIn() && request.auth.uid in getTaskData(taskId).get('assignedToUids', []);
    }


    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    match /projects/{projectId} {
      allow get: if isProjectOwner(projectId) || isProjectClient(projectId) || isAdmin() || isProjectMember(projectId);
      
      allow list: if (isSignedIn() && 
                      (request.query.where[0] == ['ownerUid', '==', request.auth.uid] ||
                       request.query.where[0] == ['clientUid', '==', request.auth.uid] ||
                       request.query.where[0] == ['memberUids', 'array-contains', request.auth.uid]))
                  || isAdmin();

      allow create: if isSignedIn();
      allow update: if isProjectOwner(projectId) || isAdmin();
      allow delete: if isProjectOwner(projectId) || isAdmin();
    }

    match /tasks/{taskId} {
      allow read: if isProjectOwner(getTaskData(taskId).projectId) 
                      || isProjectClient(getTaskData(taskId).projectId) 
                      || isAdmin() 
                      || isTaskOwner(taskId) 
                      || isTaskAssignee(taskId)
                      || isProjectMember(getTaskData(taskId).projectId);
                      
      allow create: if isProjectOwner(request.resource.data.projectId) || isAdmin();
      allow update: if isTaskOwner(taskId) || isAdmin() || isTaskAssignee(taskId);
      allow delete: if isTaskOwner(taskId) || isAdmin();

      match /timeline/{eventId} {
        allow read: if isSignedIn();
        allow create: if isTaskOwner(taskId) || isTaskAssignee(taskId) || isAdmin();
      }

      match /attachments/{attachmentId} {
        allow read: if isSignedIn();
        allow create: if isTaskOwner(taskId) || isTaskAssignee(taskId) || isAdmin();
        allow delete: if isUser(get(/databases/$(database)/documents/tasks/$(taskId)/attachments/$(attachmentId)).data.ownerUid);
      }
    }
    
    match /issues/{issueId} {
        function getIssueData() {
            return get(/databases/$(database)/documents/issues/$(issueId)).data;
        }
        function isIssueOwner() {
            return isUser(getIssueData().ownerUid);
        }
        function isIssueAssignee() {
            return isSignedIn() && request.auth.uid in getIssueData().get('assignedToUids', []);
        }

        allow read, get: if isProjectOwner(getIssueData().projectId)
                            || isAdmin()
                            || isIssueOwner()
                            || isIssueAssignee()
                            || isProjectClient(getIssueData().projectId)
                            || isProjectMember(getIssueData().projectId);

        allow list: if isSignedIn();

        allow create: if isTaskOwner(request.resource.data.taskId)
                         || isTaskAssignee(request.resource.data.taskId)
                         || isAdmin();

        allow update: if isIssueOwner() || isIssueAssignee() || isAdmin();
        allow delete: if isIssueOwner() || isAdmin();
    }

    match /attendance/{recordId} {
        allow read: if isAdmin();
        allow create: if isSignedIn();
    }
  }
}
