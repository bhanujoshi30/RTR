
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      // Must be authenticated and have 'admin' role in their user document.
      return request.auth != null && getUserRole() == 'admin';
    }

    function isOwner(ownerUid) {
      // Must be authenticated and their UID must match the provided owner UID.
      return request.auth != null && request.auth.uid == ownerUid;
    }
    
    function isClient(clientUid) {
      // Must be authenticated and their UID must match the provided client UID.
      return request.auth != null && request.auth.uid == clientUid;
    }
    
    // User profile rules
    match /users/{userId} {
      // Admins can read/write any user profile.
      // Users can read/write their own profile.
      allow read, write: if isAdmin() || isOwner(userId);
    }

    // Rules for projects
    match /projects/{projectId} {
      // Read access:
      // - The user is the owner of the project.
      // - The user is the client assigned to the project.
      // - The user is an admin.
      // - The user's UID is in the project's 'memberUids' array.
      allow read: if isOwner(resource.data.ownerUid) ||
                     isClient(resource.data.clientUid) ||
                     isAdmin() ||
                     request.auth.uid in resource.data.memberUids;
                     
      allow create: if request.auth.uid != null;
      allow update: if isOwner(resource.data.ownerUid) || isAdmin();
      allow delete: if isOwner(resource.data.ownerUid) || isAdmin();
    }
    
    // Rules for tasks
    match /tasks/{taskId} {
        // Read access:
        // - User is an admin.
        // - User is the owner of the parent project.
        // - User is the client of the parent project.
        // - User is assigned to the task (for sub-tasks).
        allow read: if isAdmin() ||
                       isOwner(resource.data.projectOwnerUid) ||
                       isClient(resource.data.clientUid) ||
                       request.auth.uid in resource.data.assignedToUids;
                       
        allow create: if request.auth.uid != null;
        allow update: if isOwner(resource.data.ownerUid) ||
                         request.auth.uid in resource.data.assignedToUids;
        allow delete: if isOwner(resource.data.ownerUid);

        // Rules for subcollections of tasks (attachments, timeline)
        match /{subcollection}/{docId} {
            allow read: if isAdmin() ||
                           isOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectOwnerUid) ||
                           isClient(get(/databases/$(database)/documents/tasks/$(taskId)).data.clientUid) ||
                           request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids;
            allow create, delete: if request.auth.uid != null;
        }
    }
    
    // Rules for issues
    match /issues/{issueId} {
      // Read access logic is similar to tasks.
      allow read: if isAdmin() ||
                     isOwner(resource.data.projectOwnerUid) ||
                     isClient(resource.data.clientUid) ||
                     request.auth.uid in resource.data.assignedToUids;

      allow create: if request.auth.uid != null;
      // Only the issue creator or someone assigned can update it.
      allow update: if isOwner(resource.data.ownerUid) ||
                       request.auth.uid in resource.data.assignedToUids;
      allow delete: if isOwner(resource.data.ownerUid);
    }
    
    // Rules for attendance
    match /attendance/{attendanceId} {
      allow read: if isAdmin();
      allow create: if request.auth.uid != null;
    }
  }
}
