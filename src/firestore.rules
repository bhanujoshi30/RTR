
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isProjectOwner(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }
    
    function isProjectClient(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.clientUid == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if isProjectOwner(projectId);
    }

    match /tasks/{taskId} {
      allow read: if isProjectOwner(resource.data.projectId) 
                   || isProjectClient(resource.data.projectId) 
                   || (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids);
      
      allow create: if isProjectOwner(request.resource.data.projectId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow update: if isProjectOwner(resource.data.projectId) 
                     || (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids);
                     
      allow delete: if isProjectOwner(resource.data.projectId);

      match /{allPaths=**} {
        allow read, write: if isProjectOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.projectId) 
                             || (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids != null && request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUids);
      }
    }

    match /issues/{issueId} {
       allow read, create, update: if isProjectOwner(resource.data.projectId)
                                 || (resource.data.assignedToUids != null && request.auth.uid in resource.data.assignedToUids);
       allow delete: if isProjectOwner(resource.data.projectId);
    }

    match /attendance/{attendanceId} {
      allow read, create: if request.auth != null;
    }
  }
}
